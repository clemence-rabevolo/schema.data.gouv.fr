{"remainingRequest":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js??ref--1-1!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/schemas/scdl/menus-collectifs/0.2.0/documentation.md?vue&type=template&id=10968526&","dependencies":[{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/schemas/scdl/menus-collectifs/0.2.0/documentation.md","mtime":1628175944071},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}