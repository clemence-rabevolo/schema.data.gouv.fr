{"remainingRequest":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js??ref--1-1!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/schemas/etalab/schema-zfe/0.6.1/README.md?vue&type=template&id=49ed9cb4&","dependencies":[{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/schemas/etalab/schema-zfe/0.6.1/README.md","mtime":1628251493578},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJNZW51U2NoZW1hIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDEiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7IGlkOiAic2NoZW1hLWRlLWRvbm5lZXMtcG91ci1sZXMtem9uZXMtYS1mYWlibGVzLWVtaXNzaW9ucyIgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigiU2Now6ltYSBkZSBkb25uw6llcyBwb3VyIGxlcyBab25lcyDDoCBGYWlibGVzIEVtaXNzaW9ucyIpXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNlIHNjaMOpbWEgcGVybWV0IGRlIG1vZMOpbGlzZXIgbGVzIHLDqGdsZXMgZGUgbGltaXRhdGlvbiBkZSBjaXJjdWxhdGlvbiBzdXIgdW5lIHpvbmUgY29uY2VybmFudCBkaWZmw6lyZW50cyB0eXBlcyBkZSB2w6loaWN1bGVzICh2w6loaWN1bGVzIHBhcnRpY3VsaWVycywgdXRpbGl0YWlyZXMsIHBvaWRzIGxvdXJkcy4uLikuIElsIHBlcm1ldCDDqWdhbGVtZW50IGRlIHByw6ljaXNlciBkZXMgZXhjZXB0aW9ucyBzdXIgY2VydGFpbnMgYXhlcyByb3V0aWVycyBvdSBsYSBab25lIMOgIEZhaWJsZSBFbWlzc2lvbiBhIGRlcyByw6hnbGVzIGRpZmbDqXJlbnRlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb250ZXh0ZSIgfSB9LCBbX3ZtLl92KCJDb250ZXh0ZSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRGFucyBsZSBjYWRyZSBkZXMgdHJhdmF1eCBkZSBs4oCZw6lxdWlwZSBkdSBQb2ludCBk4oCZYWNjw6hzIG5hdGlvbmFsIGV0IGRlIGxhIG1pc2UgZW4gb2V1dnJlIGRlIGzigJlvdXZlcnR1cmUgZGVzIGRvbm7DqWVzIHBvdXIgYW3DqWxpb3JlciBs4oCZaW5mb3JtYXRpb24gZG9udCBkaXNwb3NlbnQgbGVzIHZveWFnZXVycywgbOKAmcOpcXVpcGUgZGUgdHJhbnNwb3J0LmRhdGEuZ291di5mciBwcm9wb3NlIHVuZSBzb2x1dGlvbiBzaW1wbGUgZXQgc3RydWN0dXLDqWUgcG91ciBs4oCZb3V2ZXJ0dXJlIGRlcyBkb25uw6llcyBjb25jZXJuYW50IGxlcyBab25lcyDDoCBGYWlibGVzIEVtaXNzaW9ucyA6IGxhIEJhc2UgTmF0aW9uYWxlIGRlcyBab25lcyDDoCBGYWlibGVzIEVtaXNzaW9ucyAoQk5aRkUpLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxlIHNjaMOpbWEgZGUgbGEgYmFzZSBkZSBkb25uw6llcyBhIMOpdMOpIGNvLWNvbnN0cnVpdCBhdmVjIGxlcyBjb2xsZWN0aXZpdMOpcywgbGV1cnMgc2VydmljZXMgU0lHIGV0IGF2ZWMgbGVzIGZ1dHVycyByw6l1dGlsaXNhdGV1cnMgZGUgY2VzIGRvbm7DqWVzLiBEZXMgYXRlbGllcnMgYXZlYyBjZXMgYWN0ZXVycyBldCB1biBhdGVsaWVyIG91dmVydCAobGUgMDgvMDQvMjAyMSkgb250IHBlcm1pcyBzYSBwcm9kdWN0aW9uLiBBdWpvdXJk4oCZaHVpIGRpc3BvbmlibGUgZW4gdmVyc2lvbiAwLjYuMCwgaWwgc2VyYSBtaXMtw6Atam91ciByw6lndWxpw6hyZW1lbnQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiY2FkcmUtanVyaWRpcXVlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkNhZHJlIGp1cmlkaXF1ZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkzigJlvdXZlcnR1cmUgZGVzIGRvbm7DqWVzIHN1ciBsZXMgWm9uZXMgw6AgRmFpYmxlcyBFbWlzc2lvbnMgZXN0IHVuZSBvYmxpZ2F0aW9uIGzDqWdhbGUsIGTDqWZpbmllIHBhciBsYSBMb2kgcG91ciB1bmUgUsOpcHVibGlxdWUgTnVtw6lyaXF1ZSAobsKwIDIwMTYtMTMyMSBkdSA3IG9jdG9icmUgMjAxNikgY29uY2VybmFudCBsYSBtaXNlIMOgIGRpc3Bvc2l0aW9uIHBhciBkw6lmYXV0IGRlcyBkb25uw6llcyBhZG1pbmlzdHJhdGl2ZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZmluYWxpdGUiIH0gfSwgW192bS5fdigiRmluYWxpdMOpIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJBZmluIGRlIGZhY2lsaXRlciBs4oCZaW50w6lncmF0aW9uIGRlcyBpbmZvcm1hdGlvbnMgcmVsYXRpdmVzIGF1eCBab25lcyDDoCBGYWlibGVzIEVtaXNzaW9uIGRhbnMgZGVzIGFwcGxpY2F0aW9ucyBkZSBtb2JpbGl0w6ksIHVuIHNjaMOpbWEgZGUgZG9ubsOpZXMgYSDDqXTDqSBkw6lmaW5pIGFmaW4gZOKAmWFzc3VyZXIgdW5lIGhhcm1vbmlzYXRpb24gZGUgY2VzIGRvbm7DqWVzIHN1ciBs4oCZZW5zZW1ibGUgZHUgdGVycml0b2lyZS4gQ2Ugc2Now6ltYSBkw6lmaW5pdCBkZXMgaW5mb3JtYXRpb25zIGluZGlzcGVuc2FibGVzIGV0IGNvbXBsw6ltZW50YWlyZXMgw6AgZm91cm5pciBwYXIgbGUgcHJvZHVjdGV1ci4gQ2V0dGUgZGlzdGluY3Rpb24gYSDDqXTDqSBtaXNlIGVuIHBsYWNlIHBvdXIgbmUgcGFzIHDDqW5hbGlzZXIgbGVzIHBldGl0cyBwcm9kdWN0ZXVycyBkZSBkb25uw6llcywgZXQgZMOpZmluaXQgdW4gc3RhbmRhcmQgbWluaW1hbCBkZSBjb21wbMOpdHVkZSBkZXMgZG9ubsOpZXMuIElsIGVzdCB0b3V0ZWZvaXMgZGVtYW5kw6kgYXV4IHByb2R1Y3RldXJzIGRlIGRvbm7DqWVzIGRlIGNvbXBsw6l0ZXIgbGUgc2Now6ltYSBhdmVjIGxlIHBsdXMgZ3JhbmQgbml2ZWF1IGRlIGTDqXRhaWwgcG9zc2libGUsIGFmaW4gZGUgdHJhbnNtZXR0cmUgdW5lIGluZm9ybWF0aW9uIHBsdXMgcmljaGUgw6AgbOKAmXVzYWdlciBmaW5hbC5cbkxhIGJhc2UgcHLDqXNlbnRlIHBsdXNpZXVycyBjYXMgZOKAmXVzYWdlIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiZWxsZSByZWNlbnNlIGwnZW5zZW1ibGUgZGVzIFpvbmVzIMOgIEZhaWJsZXMgRW1pc3Npb24gZHUgdGVycml0b2lyZSBmcmFuw6dhaXMgZW4gcGVybWV0dGFudCDDoCBkZXMgc2VydmljZXMgZGUgY2FsY3VsIGTigJlpdGluw6lyYWlyZSBk4oCZaW50w6lncmVyIGNlcyBkb25uw6llcyBwb3VyIGluZGlxdWVyIGF1eCBhdXRvbW9iaWxpc3RlcyBzJ2lscyBwZXV2ZW50IGNpcmN1bGVyIG91IG5vbiBzdXIgY2VydGFpbnMgdHJvbsOnb25zIHJvdXRpZXJzLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJsZXMgZG9ubsOpZXMgcGV1dmVudCDDqWdhbGVtZW50IMOqdHJlIHV0aWxpc8OpZXMgcGFyIGRlcyBvYnNlcnZhdG9pcmVzIG5hdGlvbmF1eCBvdSBldXJvcMOpZW5zIGRlIGwnaW1wbMOpbWVudGF0aW9uIGRlIGNlIGRpc3Bvc2l0aWYgdmlzYW50IMOgIGFtw6lsaW9yZXIgbGEgcXVhbGl0w6kgZGUgbCdhaXIgZGVzIG5vZXVkcyB1cmJhaW5zLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiTGUgZmljaGllciBwcsOpY2lzZSBub3RhbW1lbnQgOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAibCdpZGVudGlmaWFudCBkJ3VuZSBhaXJlIGNvbmNlcm7DqWUgcGFyIHVuZSByw6lnbGVtZW50YXRpb24gWkZFIG91IGwnaWRlbnRpZmlhbnQgZCd1biB0cm9uw6dvbiByb3V0aWVyIGNvbmNlcm7DqSBwYXIgdW5lIHLDqGdsZSBleGNlcHRpb25uZWxsZSA7IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImxhIGRhdGUgZGUgbWlzZSBlbiBwbGFjZSBkdSBkaXNwb3NpdGlmIGV0IGxhIGRhdGUgw6AgbGFxdWVsbGUgbGEgcsOoZ2xlbWVudGF0aW9uIHByZW5kIGZpbiA7IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImxhIGNhdMOpZ29yaWUgZGUgY29uZHVjdGV1cnMgY29uY2VybsOpZSBwYXIgbGUgZGlzcG9zaXRpZiAocGVyc29ubmUgbW9yYWxlIGV0L291IHBoeXNpcXVlKSA7IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImxlcyB2aWduZXR0ZXMgQ1JJVEFJUiBhdXRvcmlzw6llcyBwYXIgdHlwZSBkZSB2w6loaWN1bGUgKHbDqWhpY3VsZSBwYXJ0aWN1bGllcnMsIHV0aWxpcmFpcmVzLCBwb2lkcyBsb3VyZHMsIGF1dG9idXMsIGRldXggcm91ZXMsIHRheGlzLi4uKSA7IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgImxlcyBob3JhaXJlcyBkJ2FwcGxpY2F0aW9uIHBhciB0eXBlIGRlIHbDqWhpY3VsZXMgKHbDqWhpY3VsZSBwYXJ0aWN1bGllcnMsIHV0aWxpcmFpcmVzLCBwb2lkcyBsb3VyZHMsIGF1dG9idXMsIGRldXggcm91ZXMsIHRheGlzLi4uKSA7IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImwnYXJyw6p0w6kgYXNzb2Npw6kgOyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigibGUgc2l0ZSBkJ2luZm9ybWF0aW9uIGFzc29jacOpIMOgIGxhIHLDqWdsZW1lbnRhdGlvbi4iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImZvcm1hdC1kZS1maWNoaWVyIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkZvcm1hdCBkZSBmaWNoaWVyIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTGVzIGpldXggZGUgZG9ubsOpZXMgc2Vyb250IHB1Ymxpw6lzIGF1IGZvcm1hdCBHZW9KU09OIGVuY29kw6kgZW4gVVRGOC4gQ2VydGFpbnMgY2hhbXBzIHNvbnQgb2JsaWdhdG9pcmVzIGV0IGQnYXV0cmVzIG9wdGlvbm5lbHMuIExlcyBjaGFtcHMgb2JsaWdhdG9pcmVzIGRvaXZlbnQgw6p0cmUgY29tcGzDqXTDqXMuIExlcyBjaGFtcHMgb3B0aW9ubmVscyBwZXV2ZW50IMOqdHJlIHZpZGVzIHNpIGxhIGRvbm7DqWUgbuKAmWVzdCBwYXMgZGlzcG9uaWJsZS4gTGEgY29sb25uZSBkb2l0IHRvdXRlZm9pcyDDqnRyZSBwcsOpc2VudGUuXG5DZSBzY2jDqW1hIGRlIGRvbm7DqWVzIHBlcm1ldCBkZSBwcm9kdWlyZSB1biBmaWNoaWVyIGTDqWNyaXZhbnQgbGVzIGFpcmVzIHLDqWdsZW1lbnTDqWVzIGV0IHVuIHNlY29uZCBmaWNoaWVyIG9wdGlvbm5lbCBkw6ljcml2YW50IGxlcyB0cm9uw6dvbnMgcm91dGllcnMgc3DDqWNpYXV4LiBMZXVyIGFydGljdWxhdGlvbiBlc3QgZXhwbGlxdcOpZSBkYW5zIGxhIHBhcnRpZSBNb2RlIGQnZW1wbG9pLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJlZmVyZW50aWVsLWdlb2dyYXBoaXF1ZSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJSw6lmw6lyZW50aWVsIGfDqW9ncmFwaGlxdWUiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMZSByw6lmw6lyZW50aWVsIMOgIHN1aXZyZSBwb3VyIGxhIHByb2R1Y3Rpb24gZGVzIGRvbm7DqWVzIGVzdCBsZSBSw6lmw6lyZW50aWVsIEdyYW5kZSBFY2hlbGxlIGRlIGwnSUdOLiBMZSBzeXN0w6htZSBkZSBwcm9qZWN0aW9uIHJldGVudSBlc3QgbGUgV0dTODQgY29tbWUgbGUgcmVjb21tYW5kZSBsZSBzdGFuZGFyZCBHZW9KU09OLlxuTGVzIHRyb27Dp29ucyByb3V0aWVycyBleGNlcHRpb25uZWxzIGRvaXZlbnQgw6p0cmUgZXh0cmFpdHMgZGUgbGEgY291Y2hlIFRST05DT05fREVfUk9VVEUgZGUgbGEgQkQgVG9wbyBkZSBsJ0lHTi4gU2kgY2VsYSBwcsOpc2VudGUgZGVzIGRpZmZpY3VsdMOpcyBtZXJjaSBkZSBjb250YWN0ZXIgY29udGFjdEB0cmFuc3BvcnQuYmV0YS5nb3V2LmZyIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicHVibGljYXRpb24iIH0gfSwgW192bS5fdigiUHVibGljYXRpb24iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ0RhbnMgbGUgYnV0IGRlIG1haW50ZW5pciDDoCBqb3VyIHVuIHLDqXBlcnRvaXJlIGNvbnNvbGlkw6kgZGVzIFpvbmVzIMOgIEZhaWJsZXMgRW1pc3Npb25zIGVuIEZyYW5jZSwgbGVzIGNvbGxlY3Rpdml0w6lzIHNvbnQgaW52aXTDqWVzIMOgIHRyYW5zbWV0dHJlIHN5c3TDqW1hdGlxdWVtZW50IGxlcyBkb25uw6llcyByZWxhdGl2ZXMgYXV4IFpGRSBzdXIgbGV1ciB0ZXJyaXRvaXJlLlxuRWxsZXMgcGV1dmVudCBham91dGVyIGxlIG1vdC1jbGVmICJ6b25lLWZhaWJsZXMtZW1pc3Npb25zIiBvdSAiemZlIiBsb3JzIGRlIGxhIHB1YmxpY2F0aW9uIGR1IGpldSBkZSBkb25uw6llcyBkYW5zIGxldXIgZXNwYWNlIGRlIHB1YmxpY2F0aW9uIChwb3J0YWlsIGxvY2FsIG91IHLDqWdpb25hbCkgb3UgZGlyZWN0ZW1lbnQgc3VyIGRhdGEuZ291di5mci5cbkxlcyBwcm9kdWN0ZXVycyBwb3Vycm9udCA6JwogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigicHVibGllciBkaXJlY3RlbWVudCBzdXIgZGF0YS5nb3V2LmZyIDsiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgInB1YmxpZXIgc3VyIHVuIHBvcnRhaWwgbG9jYWwgb3UgcsOpZ2lvbmFsIGV0IHMnYXNzdXJlciBxdWUgbGVzIGRvbm7DqWVzIHB1Ymxpw6llcyBzb250IGJpZW4gbW9pc3Nvbm7DqWVzIGV0IHLDqWbDqXJlbmPDqWVzIHN1ciBkYXRhLmdvdXYuZnIuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk5vdXMgcHLDqWNvbmlzb25zIGF1eCBwcm9kdWN0ZXVycyBkZSBkb25uw6llcyBkZSBwdWJsaWVyIGxldXJzIGZpY2hpZXJzIGNvY25lcm5hbnQgbGVzIHpvbmVzIGF2ZWMgbGEgcsOoZ2xlIGRlIG5vbW1hZ2Ugc3VpdmFudGUgOiB6ZmVfem9uZV9ub20uZ2VvanNvbiBhdmVjIG5vbSDDqXRhbnQgbGUgbm9tIGRlIGxhIGNvbGxlY3Rpdml0w6kgcHJvZHVjdHJpY2UgZGVzIGRvbm7DqWVzLCBwYXIgZXhlbXBsZSB6ZmVfem9uZV9ncmVub2JsZS5nZW9qc29uLlxuUG91ciBsZXMgZmljaGllcnMgY29uY2VybmFudCBsZXMgdm9pZXMgc3DDqWNpYWxlcyA6IHpmZV92b2llX3NwZWNpYWxlX25vbS5nZW9qc29uLCBhdmVjIG5vbSDDqXRhbnQgbGUgbm9tIGRlIGxhIGNvbGxlY3Rpdml0w6kgcHJvZHVjdHJpY2UgZGVzIGRvbm7DqWVzLCBwYXIgZXhlbXBsZSB6ZmVfdm9pZV9zcGVjaWFsZV9ncmVub2JsZS5nZW9qc29uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkVuIGNhcyBkZSBtaXNlIMOgIGpvdXIgZOKAmXVuIGZpY2hpZXIgZMOpasOgIGludMOpZ3LDqSDDoCBsYSBiYXNlIGNvbnNvbGlkw6llLCBpbCBlc3QgcmVjb21tYW5kw6kgZGUgcHLDqXZlbmlyIGzigJnDqXF1aXBlIHRyYW5zcG9ydC5kYXRhLmdvdXYuZnIgcXVpIHPigJlhc3N1cmVyYSBkZSBsJ2FjdHVhbGlzYXRpb24gZHUgZmljaGllciBlbiBxdWVzdGlvbiBldCBkZSBzb24gaW50w6lncmF0aW9uIGRhbnMgbGEgYmFzZSBjb25zb2xpZMOpZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJjb25zb2xpZGF0aW9uIiB9IH0sIFtfdm0uX3YoIkNvbnNvbGlkYXRpb24iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxlIGJhc2UgbmF0aW9uYWxlIGRlcyBaRkUgc2VyYSBjb25zdHJ1aXRlIHBhciBsJ2Fzc2VtYmxhZ2UgKG91IGNvbnNvbGlkYXRpb24pIGRlIGwnZW5zZW1ibGUgZGVzIGZpY2hpZXJzIGxvY2F1eCBwdWJsacOpcyBzdXIgZGF0YS5nb3V2LmZyLiBEZXV4IGZpY2hpZXJzIHNlcm9udCBwdWJsacOpcyA6IHVuIHByZW1pZXIgZMOpY3JpdmFudCBsZXMgYWlyZXMgY29uY2VybsOpZXMgcGFyIHVuZSBab25lIMOgIEZpYWJsZSBFbWlzc2lvbiBldCB1biBzZWNvbmQgZMOpY3JpdmFudCBsZXMgdm9pZXMgc3DDqWNpYWxlcyBkb250IGxlcyByw6hnbGVzIHNvbnQgZGlmZsOpcmVudGVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIm1pc2UtYS1qb3VyIiB9IH0sIFtfdm0uX3YoIk1pc2Utw6Atam91ciIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAnTGEgY29uc29saWRhdGlvbiBkZSBsYSBiYXNlIHNlcmEgZWZmZWN0dcOpZSBlbiBjb250aW51IHBhciB0cmFuc3BvcnQuZGF0YS5nb3V2LmZyIMOgIHBhcnRpciBkZXMgZmljaGllcnMgcHVibGnDqXMgc3VyIGRhdGEuZ291diBhdmVjIGxlIHRhZyAiemZlIiBvdSAiem9uZS1mYWlibGVzLWVtaXNzaW9ucyIgcGFyIGxlcyBwcm9kdWN0ZXVycy4gRGUgbm91dmVsbGVzIHZlcnNpb25zIHNlcm9udCBwdWJsacOpZXMgbG9yc3F1ZSBkZSBub3V2ZWxsZXMgWkZFIHNlcm9udCByZWNlbnPDqWVzIG91IG1pc2VzLcOgLWpvdXIgcGFyIGxlcyBwcm9kdWN0ZXVycy4gQ2V0dGUgbWlzZSDDoCBqb3VyIHNlIGZhaXQgw6AgcGFydGlyIGR1IGZpY2hpZXIgY29tbXVuaXF1w6kgcHLDqWPDqWRlbW1lbnQgZXQgZW4gcmVwcmVuYW50LCBlbiBsZXMgbW9kaWZpYW50IGxlIGNhcyDDqWNow6lhbnQsIGxlcyBkb25uw6llcyBleGlzdGFudGVzLiBMZSBmaWNoaWVyIHByaW5jaXBhbCBkdSBkYXRhc2V0IGNvbnN0aXR1ZSBhaW5zaSBzeXN0w6ltYXRpcXVlbWVudCBsYSBkZXJuacOocmUgbWlzZS3DoC1qb3VyLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIm1vZGUtZC1lbXBsb2kiIH0gfSwgW192bS5fdigiTW9kZSBkJ2VtcGxvaSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ29tbWUgZXhwbGlxdcOpIGNlIHNjaMOpbWEgZGUgZG9ubsOpZXMgcGVybWV0IGRlIGTDqWNyaXJlIGRlcyBhaXJlcyByw6lnbGVtZW50w6llcyBldCBkZXMgdm9pZXMgZXhjZXB0aW9ubmVsbGVzIGRvbnQgbGVzIHLDqGdsZXMgc29udCBkaWZmw6lyZW50ZXMgZGVzIHpvbmVzIGRvbnQgZWxsZXMgZm9udCBwb3VydGFudCBwYXJ0aWUuIExlcyByw6hnbGVzIGFmZmVjdGFudCBsZXMgdHJvbsOnb25zIHJvdXRpZXJzIHByaW1lbnQgZG9uYyBzdXIgbGVzIHLDqGdsZXMgYWZmZWN0YW50IHVuZSB6b25lLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImNvbmRpdGlvbnMtZC11dGlsaXNhdGlvbiIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJDb25kaXRpb25zIGTigJl1dGlsaXNhdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNvbW1lIGluZGlxdcOpIGRhbnMgbGVzIG3DqXRhZG9ubsOpZXMsIGxlIGZpY2hpZXIgZXQgc2VzIG1pc2VzLcOgLWpvdXIgc29udCBkaXN0cmlidcOpcyBzb3VzIGxhIExpY2VuY2UgT3V2ZXJ0ZSBFdGFsYWIgMi4wLiBDZWxhIHNpZ25pZmllIHF1ZSB2b3VzIHBvdXZleiB0w6lsw6ljaGFyZ2VyIGxpYnJlbWVudCBjZXR0ZSBiYXNlLCBsYSByw6l1dGlsaXNlciwgbGEgbW9kaWZpZXIsIGzigJl1dGlsaXNlciBjb21tZXJjaWFsZW1lbnQsIGV0YywgdGFudCBxdWUgdm91cyBlbiBtZW50aW9ubmV6IGxhIHNvdXJjZSAocGFyIGV4ZW1wbGUgZGFucyBsZXMgbWVudGlvbnMgbMOpZ2FsZXMgZGUgdm90cmUgYXBwbGljYXRpb24pLlxuTm91cyB0ZW5vbnMgw6AgcmVtZXJjaWVyIGxlcyBtZW1icmVzIGR1IGdyb3VwZSBkZSB0cmF2YWlsIHBvdXIgbGV1ciBpbnZlc3Rpc3NlbWVudCBkYW5zIGwnw6lsYWJvcmF0aW9uIGRlIGNlIHNjaMOpbWEuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJub3Rlcy10ZWNobmlxdWVzLXBvdXItY29udHJpYnVlci1hLWNlLXNjaGVtYSIgfSB9LAogICAgICAgIFtfdm0uX3YoIk5vdGVzIHRlY2huaXF1ZXMgcG91ciBjb250cmlidWVyIMOgIGNlIHNjaMOpbWEiKV0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQ2Ugc2Now6ltYSBzJ2FwcHVpZSBzdXIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vc3BlY3MuZnJpY3Rpb25sZXNzZGF0YS5pby90YWJsZS1zY2hlbWEvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICIiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJUYWJsZVNjaGVtYSIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gUG91ciBsZSBtb2RpZmllciwgaWwgcGV1dCDDqnRyZSB1dGlsZSBlbiBwYXJ0aWN1bGllciBkZSBzZSByw6lmw6lyZXIgw6AgbGEgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL3NwZWNzLmZyaWN0aW9ubGVzc2RhdGEuaW8vdGFibGUtc2NoZW1hLyNmaWVsZC1kZXNjcmlwdG9ycyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigic3DDqWNpZmljYXRpb24gZGVzIGRlc2NyaXB0ZXVycyBkZSBjaGFtcHMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZpY2hpZXJzLWRpc3BvbmlibGVzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkZpY2hpZXJzIGRpc3BvbmlibGVzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ2UgZMOpcMO0dCBjb250aWVudCB1biBlbnNlbWJsZSBkZSBmaWNoaWVycyB1dGlsZXMgcG91ciB1biBkw6lww7R0IGQndW4gc2Now6ltYSAiCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9zcGVjcy5mcmljdGlvbmxlc3NkYXRhLmlvL3RhYmxlLXNjaGVtYS8iLAogICAgICAgICAgICAgIHRhcmdldDogIiIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIlRhYmxlIFNjaGVtYSIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2V0YWxhYi9zY2hlbWEtemZlL2Jsb2IvbWFzdGVyL0NIQU5HRUxPRy5tZCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICIiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiY29kZSIsIFtfdm0uX3YoIkNIQU5HRUxPRy5tZCIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGNvbnRpZW50IGxhIGxpc3RlIGRlcyBjaGFuZ2VtZW50cyBlbnRyZSBsZXMgZGlmZsOpcmVudGVzIHZlcnNpb25zIGR1IHNjaMOpbWEgOyIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vZXRhbGFiL3NjaGVtYS16ZmUvYmxvYi9tYXN0ZXIvZXhlbXBsZS12YWxpZGUtem9uZS5nZW9qc29uIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIiIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW19jKCJjb2RlIiwgW192bS5fdigiZXhlbXBsZS12YWxpZGUtem9uZS5nZW9qc29uIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgZXN0IHVuIGZpY2hpZXIgR2VvSlNPTiBkJ2V4ZW1wbGUgY29uZm9ybWUgZMOpY3JpdmFudCB1bmUgYWlyZSBwYXIgcmFwcG9ydCBhdSBzY2jDqW1hIGTDqWNyaXQgZGFucyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzY2hlbWEuanNvbiIpXSksCiAgICAgICAgICBfdm0uX3YoIiAgOyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL2V0YWxhYi9zY2hlbWEtemZlL2Jsb2IvbWFzdGVyL2V4ZW1wbGUtdmFsaWRlLXZvaWUtc3BlY2lhbGUuZ2VvanNvbiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICIiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiY29kZSIsIFtfdm0uX3YoImV4ZW1wbGUtdmFsaWRlLXZvaWUtc3BlY2lhbGUuZ2VvanNvbiIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGVzdCB1biBmaWNoaWVyIEdlb0pTT04gZCdleGVtcGxlIGNvbmZvcm1lIGTDqWNyaXZhbnQgdW5lIHZvaWUgc3DDqWNpYWxlIHBhciByYXBwb3J0IGF1IHNjaMOpbWEgZMOpY3JpdCBkYW5zICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNjaGVtYS5qc29uIildKSwKICAgICAgICAgIF92bS5fdigiIDsiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9ldGFsYWIvc2NoZW1hLXpmZS9ibG9iL21hc3Rlci9MSUNFTlNFLm1kIiwKICAgICAgICAgICAgICAgIHRhcmdldDogIiIsCiAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW19jKCJjb2RlIiwgW192bS5fdigiTElDRU5TRS5tZCIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgZXN0IGxlIGZpY2hpZXIgZGUgbGljZW5jZSBkdSBkw6lww7R0IDsiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9ldGFsYWIvc2NoZW1hLXpmZS9ibG9iL21hc3Rlci9SRUFETUUubWQiLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiIiwKICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX2MoImNvZGUiLCBbX3ZtLl92KCJSRUFETUUubWQiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGVzdCBsZSBmaWNoaWVyIHF1ZSB2b3VzIGxpc2V6IGFjdHVlbGxlbWVudCA7IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICJodHRwczovL2dpdGh1Yi5jb20vZXRhbGFiL3NjaGVtYS16ZmUvYmxvYi9tYXN0ZXIvcmVxdWlyZW1lbnRzLnR4dCIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICIiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiY29kZSIsIFtfdm0uX3YoInJlcXVpcmVtZW50cy50eHQiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBsaXN0ZSBsZXMgZMOpcGVuZGFuY2VzIFB5dGhvbiBuw6ljZXNzYWlyZXMgcG91ciBlZmZlY3R1ZXIgZGVzIHRlc3RzIGVuIGludMOpZ3JhdGlvbiBjb250aW51ZSBzdXIgbGUgZMOpcMO0dCA7IgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0aHViLmNvbS9ldGFsYWIvc2NoZW1hLXpmZS9ibG9iL21hc3Rlci9zY2hlbWEuanNvbiIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICIiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiY29kZSIsIFtfdm0uX3YoInNjaGVtYS5qc29uIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBlc3QgbGUgc2Now6ltYSBhdSBmb3JtYXQgVGFibGUgU2NoZW1hLiIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaW50ZWdyYXRpb24tY29udGludWUiIH0gfSwgWwogICAgICAgIF92bS5fdigiSW50w6lncmF0aW9uIGNvbnRpbnVlIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ2UgZMOpcMO0dCBlc3QgY29uZmlndXLDqSBwb3VyIHV0aWxpc2VyIGRlIGwnaW50w6lncmF0aW9uIGNvbnRpbnVlLCBzaSB2b3VzIHV0aWxpc2V6IEdpdEh1Yi4gw4AgY2hhcXVlIGNvbW1pdCwgdW5lIHN1aXRlIGRlIHRlc3RzIHNlcmEgbGFuY8OpZSB2aWEgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ2l0aHViLmNvbS9mZWF0dXJlcy9hY3Rpb25zIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICIiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJHaXRIdWIgQWN0aW9ucyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgYWZpbiBkZSB2w6lyaWZpZXIgOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgInF1ZSB2b3RyZSBzY2jDqW1hIGVzdCB2YWxpZGUgw6AgbGEgc3DDqWNpZmljYXRpb24gVGFibGUgU2NoZW1hIDsiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJxdWUgdm9zIGZpY2hpZXJzIGQnZXhlbXBsZXMgc29udCBjb25mb3JtZXMgYXUgc2Now6ltYS4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJWb3VzIHBvdXZleiBjb25zdWx0ZXIgbGEgY29uZmlndXJhdGlvbiB1dGlsaXPDqWUgZGFucyAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi5naXRodWIvd29ya2Zsb3dzL3Rlc3QueW1sIiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiLmdpdGh1Yi93b3JrZmxvd3MvdGVzdC55bWwiKV0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIuIikKICAgICAgXSkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}