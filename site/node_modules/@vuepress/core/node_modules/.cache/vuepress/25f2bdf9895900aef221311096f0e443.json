{"remainingRequest":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js??ref--1-1!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/schemas/etalab/schema-sdirve/0.1.0/documentation.md?vue&type=template&id=42820c78&","dependencies":[{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/schemas/etalab/schema-sdirve/0.1.0/documentation.md","mtime":1628175943241},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJNZW51U2NoZW1hIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAic2RpcnZlIiB9IH0sIFtfdm0uX3YoInNkaXJ2ZSIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2Now6ltYSBkaXJlY3RldXIgZGVzIGluZnJhc3RydWN0dXJlcyBkZSByZWNoYXJnZSBwb3VyIHbDqWhpY3VsZXMgw6lsZWN0cmlxdWVzIGV0IGh5YnJpZGVzIHJlY2hhcmdlYWJsZXMiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJTcMOpY2lmaWNhdGlvbiBkdSBmaWNoaWVyIGQnw6ljaGFuZ2UgcmVsYXRpZiBhdXggc2Now6ltYSBkaXJlY3RldXIgZGVzIGluZnJhc3RydWN0dXJlcyBkZSByZWNoYXJnZSBwb3VyIHbDqWhpY3VsZXMgw6lsZWN0cmlxdWVzIGV0IGh5YnJpZGVzIHJlY2hhcmdlYWJsZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiU2Now6ltYSBjcsOpw6kgbGUgOiAxOC8wMy8yMDIxIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlNpdGUgd2ViIDogaHR0cHM6Ly9naXRodWIuY29tL2V0YWxhYi9zY2hlbWEtc2RpcnZlIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWZXJzaW9uIDogMC4xLjAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1vZGVsZS1kZS1kb25uZWVzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIk1vZMOobGUgZGUgZG9ubsOpZXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNSIsIHsgYXR0cnM6IHsgaWQ6ICJsaXN0ZS1kZXMtcHJvcHJpZXRlcyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJMaXN0ZSBkZXMgcHJvcHJpw6l0w6lzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidGFibGUiLCBbCiAgICAgICAgX2MoInRoZWFkIiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJQcm9wcmnDqXTDqSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCBbX3ZtLl92KCJUeXBlIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIk9ibGlnYXRvaXJlIildKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGJvZHkiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIiNwcm9wcmlldGUtZGF0ZS1yZWFsaXNhdGlvbi1kaWFnbm9zdGljIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJkYXRlX3JlYWxpc2F0aW9uX2RpYWdub3N0aWMiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF92bS5fdigiZGF0ZSAoZm9ybWF0ICIpLAogICAgICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiJVktJW0tJWQiKV0pLAogICAgICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiT3VpIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3Byb3ByaWV0ZS1kYXRlLWFkb3B0aW9uLXNkaXJ2ZSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoImRhdGVfYWRvcHRpb25fc2RpcnZlIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoImRhdGUgKGZvcm1hdCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiVZLSVtLSVkIildKSwKICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk91aSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNwcm9wcmlldGUtZGF0ZS1vYmplY3RpZnMiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJkYXRlX29iamVjdGlmcyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJkYXRlIChmb3JtYXQgIiksCiAgICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIlWS0lbS0lZCIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjcHJvcHJpZXRlLWNvZGUtY29tbXVuZS1pbnNlZSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoImNvZGVfY29tbXVuZV9pbnNlZSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJjaGHDrm5lIGRlIGNhcmFjdMOocmVzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk91aSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNwcm9wcmlldGUtY29kZS1pcmlzLWluc2VlIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiY29kZV9pcmlzX2luc2VlIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoImNoYcOubmUgZGUgY2FyYWN0w6hyZXMiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm9uIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3Byb3ByaWV0ZS1leGlzdGFudC1uYi1wZGMtaW50ZXJ2YWxsZS0xIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJleGlzdGFudF9uYl9wZGNfaW50ZXJ2YWxsZV8xIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiT3VpIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3Byb3ByaWV0ZS1leGlzdGFudC1uYi1wZGMtaW50ZXJ2YWxsZS0yIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJleGlzdGFudF9uYl9wZGNfaW50ZXJ2YWxsZV8yIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiT3VpIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3Byb3ByaWV0ZS1leGlzdGFudC1uYi1wZGMtaW50ZXJ2YWxsZS0zIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJleGlzdGFudF9uYl9wZGNfaW50ZXJ2YWxsZV8zIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiT3VpIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3Byb3ByaWV0ZS1leGlzdGFudC1uYi1wZGMtaW50ZXJ2YWxsZS00IiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJleGlzdGFudF9uYl9wZGNfaW50ZXJ2YWxsZV80IildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiT3VpIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3Byb3ByaWV0ZS1leGlzdGFudC1uYi1tb3llbi1yZWNoYXJnZXMiIH0gfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoImV4aXN0YW50X25iX21veWVuX3JlY2hhcmdlcyIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJub21icmUgcsOpZWwiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiT3VpIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Byb3ByaWV0ZS1leGlzdGFudC1kdXJlZS1tb3llbm5lLXJlY2hhcmdlcyIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoImV4aXN0YW50X2R1cmVlX21veWVubmVfcmVjaGFyZ2VzIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSByw6llbCIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogIiNwcm9wcmlldGUtZXhpc3RhbnQtdGF1eC1kaXNwb25pYmlsaXRlLW1veWVuIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiZXhpc3RhbnRfdGF1eF9kaXNwb25pYmlsaXRlX21veWVuIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSByw6llbCIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLWV2YWx1YXRpb24tZGV2ZWxvcHBlbWVudC1uYi1wZGMtaW50ZXJ2YWxsZS0xIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiZXZhbHVhdGlvbl9kZXZlbG9wcGVtZW50X25iX3BkY19pbnRlcnZhbGxlXzEiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLWV2YWx1YXRpb24tZGV2ZWxvcHBlbWVudC1uYi1wZGMtaW50ZXJ2YWxsZS0yIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiZXZhbHVhdGlvbl9kZXZlbG9wcGVtZW50X25iX3BkY19pbnRlcnZhbGxlXzIiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLWV2YWx1YXRpb24tZGV2ZWxvcHBlbWVudC1uYi1wZGMtaW50ZXJ2YWxsZS0zIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiZXZhbHVhdGlvbl9kZXZlbG9wcGVtZW50X25iX3BkY19pbnRlcnZhbGxlXzMiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLWV2YWx1YXRpb24tZGV2ZWxvcHBlbWVudC1uYi1wZGMtaW50ZXJ2YWxsZS00IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiZXZhbHVhdGlvbl9kZXZlbG9wcGVtZW50X25iX3BkY19pbnRlcnZhbGxlXzQiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLWVzdGltYXRpb24tdmVoaWN1bGVzLXBhcnRpY3VsaWVycy1lbGVjdHJpcXVlcyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoImVzdGltYXRpb25fdmVoaWN1bGVzX3BhcnRpY3VsaWVyc19lbGVjdHJpcXVlcyIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJub21icmUgZW50aWVyIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk91aSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgIiNwcm9wcmlldGUtZXN0aW1hdGlvbi12ZWhpY3VsZXMtcGFydGljdWxpZXJzLWh5YnJpZGVzLXJlY2hhcmdlYWJsZXMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiZXN0aW1hdGlvbl92ZWhpY3VsZXNfcGFydGljdWxpZXJzX2h5YnJpZGVzX3JlY2hhcmdlYWJsZXMiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtaW50ZXJ2YWxsZS0xIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX2ludGVydmFsbGVfMSIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJub21icmUgZW50aWVyIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk91aSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIiNwcm9wcmlldGUtb2JqZWN0aWZzLW5iLXBkYy1pbnRlcnZhbGxlLTIiIH0gfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIm9iamVjdGlmc19uYl9wZGNfaW50ZXJ2YWxsZV8yIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiT3VpIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI3Byb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLWludGVydmFsbGUtMyIgfSB9LAogICAgICAgICAgICAgICAgW192bS5fdigib2JqZWN0aWZzX25iX3BkY19pbnRlcnZhbGxlXzMiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtaW50ZXJ2YWxsZS00IiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX2ludGVydmFsbGVfNCIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJub21icmUgZW50aWVyIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk91aSIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIiNwcm9wcmlldGUtb2JqZWN0aWZzLW5iLXRvdGFsLXN0YXRpb25zIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJvYmplY3RpZnNfbmJfdG90YWxfc3RhdGlvbnMiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2UtcmVzaWRlbnRpZWwtaW50ZXJ2YWxsZS0xIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigib2JqZWN0aWZzX25iX3BkY191c2FnZV9yZXNpZGVudGllbF9pbnRlcnZhbGxlXzEiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2UtcHJvZmVzc2lvbm5lbC1pbnRlcnZhbGxlLTEiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Byb2Zlc3Npb25uZWxfaW50ZXJ2YWxsZV8xIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm9uIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAiI3Byb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLW9jY2FzaW9ubmVsLXRyYW5zaXQtaW50ZXJ2YWxsZS0xIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIm9iamVjdGlmc19uYl9wZGNfdXNhZ2Vfb2NjYXNpb25uZWxfdHJhbnNpdF9pbnRlcnZhbGxlXzEiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2UtcmVzaWRlbnRpZWwtaW50ZXJ2YWxsZS0yIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigib2JqZWN0aWZzX25iX3BkY191c2FnZV9yZXNpZGVudGllbF9pbnRlcnZhbGxlXzIiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2UtcHJvZmVzc2lvbm5lbC1pbnRlcnZhbGxlLTIiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Byb2Zlc3Npb25uZWxfaW50ZXJ2YWxsZV8yIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm9uIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAiI3Byb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLW9jY2FzaW9ubmVsLXRyYW5zaXQtaW50ZXJ2YWxsZS0yIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIm9iamVjdGlmc19uYl9wZGNfdXNhZ2Vfb2NjYXNpb25uZWxfdHJhbnNpdF9pbnRlcnZhbGxlXzIiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2UtcmVzaWRlbnRpZWwtaW50ZXJ2YWxsZS0zIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigib2JqZWN0aWZzX25iX3BkY191c2FnZV9yZXNpZGVudGllbF9pbnRlcnZhbGxlXzMiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2UtcHJvZmVzc2lvbm5lbC1pbnRlcnZhbGxlLTMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Byb2Zlc3Npb25uZWxfaW50ZXJ2YWxsZV8zIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm9uIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAiI3Byb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLW9jY2FzaW9ubmVsLXRyYW5zaXQtaW50ZXJ2YWxsZS0zIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIm9iamVjdGlmc19uYl9wZGNfdXNhZ2Vfb2NjYXNpb25uZWxfdHJhbnNpdF9pbnRlcnZhbGxlXzMiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2UtcmVzaWRlbnRpZWwtaW50ZXJ2YWxsZS00IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigib2JqZWN0aWZzX25iX3BkY191c2FnZV9yZXNpZGVudGllbF9pbnRlcnZhbGxlXzQiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjcHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2UtcHJvZmVzc2lvbm5lbC1pbnRlcnZhbGxlLTQiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Byb2Zlc3Npb25uZWxfaW50ZXJ2YWxsZV80IildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm9uIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgICAiI3Byb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLW9jY2FzaW9ubmVsLXRyYW5zaXQtaW50ZXJ2YWxsZS00IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIm9iamVjdGlmc19uYl9wZGNfdXNhZ2Vfb2NjYXNpb25uZWxfdHJhbnNpdF9pbnRlcnZhbGxlXzQiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjcHJvcHJpZXRlLXVybC1zZGlydmUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJ1cmxfc2RpcnZlIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoImNoYcOubmUgZGUgY2FyYWN0w6hyZXMgKGZvcm1hdCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInVyaSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3ByaWV0ZS1kYXRlLXJlYWxpc2F0aW9uLWRpYWdub3N0aWMiIH0gfSwgWwogICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkYXRlX3JlYWxpc2F0aW9uX2RpYWdub3N0aWMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigiRGVzY3JpcHRpb24gOiBEYXRlIGRlIHLDqWFsaXNhdGlvbiBkdSBkaWFnbm9zdGljLiIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDIwMjEtMDctMTIiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb2JsaWdhdG9pcmUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVHlwZSA6IGRhdGUgKGZvcm1hdCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiJVktJW0tJWQiKV0pLAogICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9wcmlldGUtZGF0ZS1hZG9wdGlvbi1zZGlydmUiIH0gfSwgWwogICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkYXRlX2Fkb3B0aW9uX3NkaXJ2ZSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJEZXNjcmlwdGlvbiA6IERhdGUgZCdhZG9wdGlvbiBkdSBzY2jDqW1hIGRpcmVjdGV1ciBJUlZFLiIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDIwMjEtMDctMTIiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb2JsaWdhdG9pcmUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVHlwZSA6IGRhdGUgKGZvcm1hdCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiJVktJW0tJWQiKV0pLAogICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9wcmlldGUtZGF0ZS1vYmplY3RpZnMiIH0gfSwgWwogICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJkYXRlX29iamVjdGlmcyIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IERhdGUgZml4w6llIHBvdXIgbCdhdHRlaW50ZSBkZXMgb2JqZWN0aWZzIMOgIGwnw6ljaMOpYW5jZSBvcMOpcmF0aW9ubmVsbGUgKGluZsOpcmlldXJlIG91IMOpZ2FsZSDDoCAzIGFucykuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDIwMjMtMDctMTIiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb2JsaWdhdG9pcmUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVHlwZSA6IGRhdGUgKGZvcm1hdCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiJVktJW0tJWQiKV0pLAogICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9wcmlldGUtY29kZS1jb21tdW5lLWluc2VlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiY29kZV9jb21tdW5lX2luc2VlIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogQ29kZSBJTlNFRSBkZSBjaGFjdW5lIGRlcyBjb21tdW5lcyBjb3V2ZXJ0ZXMgcGFyIGxlIHRlcnJpdG9pcmUgZHUgU0RJUlZFLCBhdmVjIHVuZSBsaWduZSBwYXIgY29tbXVuZSBkYW5zIGxlIGNhcyBvw7kgbGVzIGRvbm7DqWVzIG5lIHNvbnQgcGFzIHJlbnNlaWduw6llcyDDoCBsJ8OpY2hlbGxlIGRlIGwnSVJJUy4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogMjMxNTAiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb2JsaWdhdG9pcmUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBjaGHDrm5lIGRlIGNhcmFjdMOocmVzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk1vdGlmIDogIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIl4oWzAxMy05XVxcZHwyW0FCMS05XSlcXGR7M30kIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3ByaWV0ZS1jb2RlLWlyaXMtaW5zZWUiIH0gfSwgWwogICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJjb2RlX2lyaXNfaW5zZWUiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBDb2RlIGRlIGNoYXF1ZSBJUklTIGNvdXZlcnQgcGFyIGxlIHRlcnJpdG9pcmUgZHUgU0RJUlZFLiBEYW5zIGxlIGNhcyBvw7kgbGVzIGRvbm7DqWVzIG5lIHNvbnQgcGFzIHJlbnNlaWduw6llcyDDoCBsJ8OpY2hlbGxlIGRlIGwnSVJJUyBtYWlzIGRlIGxhIGNvbW11bmUsIG5lIHBhcyByZW1wbGlyIGNlIGNoYW1wcy4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogMkEwMDQwMTAxIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9wdGlvbm5lbGxlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJNb3RpZiA6ICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJeKFswMTMtOV1cXGR8MltBQjEtOV0pXFxkezd9JCIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9wcmlldGUtZXhpc3RhbnQtbmItcGRjLWludGVydmFsbGUtMSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV4aXN0YW50X25iX3BkY19pbnRlcnZhbGxlXzEiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBEaWFnbm9zdGljIC0gTm9tYnJlIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgZXhpc3RhbnRzIMOgIGxhIGRhdGUgZCfDqWxhYm9yYXRpb24gZHUgZGlhZ25vc3RpYywgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlIOKJpCA3LDQga1ZBLiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiAxMiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3ByaWV0ZS1leGlzdGFudC1uYi1wZGMtaW50ZXJ2YWxsZS0yIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXhpc3RhbnRfbmJfcGRjX2ludGVydmFsbGVfMiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IERpYWdub3N0aWMgLSBOb21icmUgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyBleGlzdGFudHMgw6AgbGEgZGF0ZSBkJ8OpbGFib3JhdGlvbiBkdSBkaWFnbm9zdGljLCBkJ3VuZSBwdWlzc2FuY2UgdW5pdGFpcmUgPiA3LDQga1ZBIGV0IOKJpCAyMiAga1ZBLiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiAxMiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3ByaWV0ZS1leGlzdGFudC1uYi1wZGMtaW50ZXJ2YWxsZS0zIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXhpc3RhbnRfbmJfcGRjX2ludGVydmFsbGVfMyIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IERpYWdub3N0aWMgLSBOb21icmUgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyBleGlzdGFudHMgw6AgbGEgZGF0ZSBkJ8OpbGFib3JhdGlvbiBkdSBkaWFnbm9zdGljLCBkJ3VuZSBwdWlzc2FuY2UgdW5pdGFpcmUgPiAyMiBrVkEgZXQgPCAxNTAgIGtWQS4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogMTIiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb2JsaWdhdG9pcmUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBub21icmUgZW50aWVyIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgc3Vww6lyaWV1ciDDoCAwIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJwcm9wcmlldGUtZXhpc3RhbnQtbmItcGRjLWludGVydmFsbGUtNCIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV4aXN0YW50X25iX3BkY19pbnRlcnZhbGxlXzQiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBEaWFnbm9zdGljIC0gTm9tYnJlIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgZXhpc3RhbnRzIMOgIGxhIGRhdGUgZCfDqWxhYm9yYXRpb24gZHUgZGlhZ25vc3RpYywgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlIOKJpSAxNTAga1ZBLiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiAxMiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3ByaWV0ZS1leGlzdGFudC1uYi1tb3llbi1yZWNoYXJnZXMiIH0gfSwgWwogICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJleGlzdGFudF9uYl9tb3llbl9yZWNoYXJnZXMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBEaWFnbm9zdGljIC0gTm9tYnJlIG1veWVuIGRlIHNlc3Npb25zIGRlIHJlY2hhcmdlcyBxdW90aWRpZW5uZXMgc3VyIGxlcyBwb2ludHMgZGUgY2hhcmdlIG91dmVydHMgYXUgcHVibGljIGV4aXN0YW50cywgc3VyIGxlcyAyMiBtb2lzIHByw6ljw6lkYW50IGwnw6lsYWJvcmF0aW9uIGR1IGRpYWdub3N0aWMuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDg5IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIHLDqWVsIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgc3Vww6lyaWV1ciDDoCAwIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgeyBhdHRyczogeyBpZDogInByb3ByaWV0ZS1leGlzdGFudC1kdXJlZS1tb3llbm5lLXJlY2hhcmdlcyIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV4aXN0YW50X2R1cmVlX21veWVubmVfcmVjaGFyZ2VzIildKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogRGlhZ25vc3RpYyAtIER1csOpZSBtb3llbm5lIGRlcyBzZXNzaW9ucyAoZW4gbWludXRlcykgZGUgcmVjaGFyZ2UgcsOpdXNzaWVzIGVuIG1pbnV0ZXMgc3VyIGxlcyBwb2ludHMgZGUgY2hhcmdlIG91dmVydHMgYXUgcHVibGljIGV4aXN0YW50cywgc3VyIGxlcyAyMiBtb2lzIHByw6ljw6lkYW50IGwnw6lsYWJvcmF0aW9uIGR1IGRpYWdub3N0aWMuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDEyMCIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSByw6llbCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJwcm9wcmlldGUtZXhpc3RhbnQtdGF1eC1kaXNwb25pYmlsaXRlLW1veWVuIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXhpc3RhbnRfdGF1eF9kaXNwb25pYmlsaXRlX21veWVuIildKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogRGlhZ25vc3RpYyAtIFRhdXggZGUgZGlzcG9uaWJpbGl0w6kgbW95ZW4gKCUpIGRlcyBwb2ludHMgZGUgY2hhcmdlIG91dmVydHMgYXUgcHVibGljIGV4aXN0YW50cywgc3VyIGxlcyAyMiBtb2lzIHByw6ljw6lkYW50IGwnw6lsYWJvcmF0aW9uIGR1IGRpYWdub3N0aWMuIExlIHRhdXggZGUgZGlzcG9uaWJpbGl0w6kgZOKAmXVuIHBvaW50IGRlIHJlY2hhcmdlIGVzdCBsZSByYXBwb3J0IGVudHJlIGxlIG5vbWJyZSBk4oCZaGV1cmVzIG/DuSBsZSBwb2ludCBkZSBjaGFyZ2UgZXN0IGFwdGUgw6AgZm9uY3Rpb25uZXIgZXQgbGUgbm9tYnJlIGTigJloZXVyZXMgZCdvdXZlcnR1cmUgZGUgbGEgc3RhdGlvbi4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogNjcuNSIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSByw6llbCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIGVudHJlIDAgZXQgMTAwIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJwcm9wcmlldGUtZXZhbHVhdGlvbi1kZXZlbG9wcGVtZW50LW5iLXBkYy1pbnRlcnZhbGxlLTEiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJldmFsdWF0aW9uX2RldmVsb3BwZW1lbnRfbmJfcGRjX2ludGVydmFsbGVfMSIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IERpYWdub3N0aWMgLSBFdmFsdWF0aW9uIGR1IG5vbWJyZSBkZSBwb2ludHMgZGUgY2hhcmdlIG91dmVydHMgYXUgcHVibGljIGluZHVpdHMgcGFyIGxhIG1pc2UgZW4gxZN1dnJlIGRlIGRpc3Bvc2l0aW9ucyBsw6lnaXNsYXRpdmVzIGV0IHLDqWdsZW1lbnRhaXJlcyBvdSBwYXIgZGVzIHByb2pldHMgZCdpbXBsYW50YXRpb24gw6AgbCfDqWNow6lhbmNlIG9ww6lyYXRpb25uZWxsZSwgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlIOKJpCA3LDQga1ZBLiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA2NyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogInByb3ByaWV0ZS1ldmFsdWF0aW9uLWRldmVsb3BwZW1lbnQtbmItcGRjLWludGVydmFsbGUtMiIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImV2YWx1YXRpb25fZGV2ZWxvcHBlbWVudF9uYl9wZGNfaW50ZXJ2YWxsZV8yIildKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogRGlhZ25vc3RpYyAtIEV2YWx1YXRpb24gZHUgbm9tYnJlIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgaW5kdWl0cyBwYXIgbGEgbWlzZSBlbiDFk3V2cmUgZGUgZGlzcG9zaXRpb25zIGzDqWdpc2xhdGl2ZXMgZXQgcsOpZ2xlbWVudGFpcmVzIG91IHBhciBkZXMgcHJvamV0cyBkJ2ltcGxhbnRhdGlvbiDDoCBsJ8OpY2jDqWFuY2Ugb3DDqXJhdGlvbm5lbGxlLCBkJ3VuZSBwdWlzc2FuY2UgdW5pdGFpcmUgPiA3LDQgZXQg4omkIDIyICBrVkEuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAicHJvcHJpZXRlLWV2YWx1YXRpb24tZGV2ZWxvcHBlbWVudC1uYi1wZGMtaW50ZXJ2YWxsZS0zIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXZhbHVhdGlvbl9kZXZlbG9wcGVtZW50X25iX3BkY19pbnRlcnZhbGxlXzMiKV0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBEaWFnbm9zdGljIC0gRXZhbHVhdGlvbiBkdSBub21icmUgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyBpbmR1aXRzIHBhciBsYSBtaXNlIGVuIMWTdXZyZSBkZSBkaXNwb3NpdGlvbnMgbMOpZ2lzbGF0aXZlcyBldCByw6lnbGVtZW50YWlyZXMgb3UgcGFyIGRlcyBwcm9qZXRzIGQnaW1wbGFudGF0aW9uIMOgIGwnw6ljaMOpYW5jZSBvcMOpcmF0aW9ubmVsbGUsIGQndW5lIHB1aXNzYW5jZSB1bml0YWlyZSA+IDIyIGV0IDwgMTUwICBrVkEuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAicHJvcHJpZXRlLWV2YWx1YXRpb24tZGV2ZWxvcHBlbWVudC1uYi1wZGMtaW50ZXJ2YWxsZS00IgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZXZhbHVhdGlvbl9kZXZlbG9wcGVtZW50X25iX3BkY19pbnRlcnZhbGxlXzQiKV0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBEaWFnbm9zdGljIC0gRXZhbHVhdGlvbiBkdSBub21icmUgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyBpbmR1aXRzIHBhciBsYSBtaXNlIGVuIMWTdXZyZSBkZSBkaXNwb3NpdGlvbnMgbMOpZ2lzbGF0aXZlcyBldCByw6lnbGVtZW50YWlyZXMgb3UgcGFyIGRlcyBwcm9qZXRzIGQnaW1wbGFudGF0aW9uIMOgIGwnw6ljaMOpYW5jZSBvcMOpcmF0aW9ubmVsbGUsIGQndW5lIHB1aXNzYW5jZSB1bml0YWlyZSDiiaUgMTUwICBrVkEuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAicHJvcHJpZXRlLWVzdGltYXRpb24tdmVoaWN1bGVzLXBhcnRpY3VsaWVycy1lbGVjdHJpcXVlcyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImVzdGltYXRpb25fdmVoaWN1bGVzX3BhcnRpY3VsaWVyc19lbGVjdHJpcXVlcyIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IERpYWdub3N0aWMgLSBFc3RpbWF0aW9uIGR1IHBhcmMgZGUgdsOpaGljdWxlcyBwYXJ0aWN1bGllcnMgw6lsZWN0cmlxdWVzIMOgIGwnw6ljaMOpYW5jZSBvcMOpcmF0aW9ubmVsbGUuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICJwcm9wcmlldGUtZXN0aW1hdGlvbi12ZWhpY3VsZXMtcGFydGljdWxpZXJzLWh5YnJpZGVzLXJlY2hhcmdlYWJsZXMiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigiZXN0aW1hdGlvbl92ZWhpY3VsZXNfcGFydGljdWxpZXJzX2h5YnJpZGVzX3JlY2hhcmdlYWJsZXMiKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IERpYWdub3N0aWMgLUVzdGltYXRpb24gZHUgcGFyYyBkZSB2w6loaWN1bGVzIHBhcnRpY3VsaWVycyBoeWJyaWRlcyByZWNoYXJnZWFibGVzIMOgIGwnw6ljaMOpYW5jZSBvcMOpcmF0aW9ubmVsbGUuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAicHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtaW50ZXJ2YWxsZS0xIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib2JqZWN0aWZzX25iX3BkY19pbnRlcnZhbGxlXzEiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBPYmplY3RpZnMgLSBOb21icmUgdG90YWwgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyDDoCBsJ8OpY2jDqWFuY2Ugb3DDqXJhdGlvbm5lbGxlLCBkJ3VuZSBwdWlzc2FuY2UgdW5pdGFpcmUg4omkIDcsNCBrVkEuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAicHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtaW50ZXJ2YWxsZS0yIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib2JqZWN0aWZzX25iX3BkY19pbnRlcnZhbGxlXzIiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBPYmplY3RpZnMgLSBOb21icmUgdG90YWwgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyDDoCBsJ8OpY2jDqWFuY2Ugb3DDqXJhdGlvbm5lbGxlLCBkJ3VuZSBwdWlzc2FuY2UgdW5pdGFpcmUgPiA3LDQga1ZBIGV0IOKJpCAyMiAga1ZBLiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA2NyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLWludGVydmFsbGUtMyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9iamVjdGlmc19uYl9wZGNfaW50ZXJ2YWxsZV8zIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogT2JqZWN0aWZzIC0gTm9tYnJlIHRvdGFsIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgw6AgbCfDqWNow6lhbmNlIG9ww6lyYXRpb25uZWxsZSwgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlID4gMjIga1ZBIGV0IDwgMTUwICBrVkEuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAicHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtaW50ZXJ2YWxsZS00IiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigib2JqZWN0aWZzX25iX3BkY19pbnRlcnZhbGxlXzQiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBPYmplY3RpZnMgLSBOb21icmUgdG90YWwgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyDDoCBsJ8OpY2jDqWFuY2Ugb3DDqXJhdGlvbm5lbGxlLCBkJ3VuZSBwdWlzc2FuY2UgdW5pdGFpcmUg4omlIDE1MCBrVkEuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDQiLCB7IGF0dHJzOiB7IGlkOiAicHJvcHJpZXRlLW9iamVjdGlmcy1uYi10b3RhbC1zdGF0aW9ucyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIm9iamVjdGlmc19uYl90b3RhbF9zdGF0aW9ucyIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJEZXNjcmlwdGlvbiA6IE9iamVjdGlmcyAtIE5vbWJyZSB0b3RhbCBkZSBzdGF0aW9ucy4iKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA2NyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogInByb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLXJlc2lkZW50aWVsLWludGVydmFsbGUtMSIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Jlc2lkZW50aWVsX2ludGVydmFsbGVfMSIpCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogT2JqZWN0aWZzIC0gTm9tYnJlIHRvdGFsIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgw6AgbCfDqWNow6lhbmNlIG9ww6lyYXRpb25uZWxsZSwgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlIOKJpCA3LDQga1ZBIC0gdXNhZ2UgcHJpbmNpcGFsIHLDqXNpZGVudGllbC4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogNjciKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb3B0aW9ubmVsbGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBub21icmUgZW50aWVyIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgc3Vww6lyaWV1ciDDoCAwIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJwcm9wcmlldGUtb2JqZWN0aWZzLW5iLXBkYy11c2FnZS1wcm9mZXNzaW9ubmVsLWludGVydmFsbGUtMSIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Byb2Zlc3Npb25uZWxfaW50ZXJ2YWxsZV8xIikKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBPYmplY3RpZnMgLSBOb21icmUgdG90YWwgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyDDoCBsJ8OpY2jDqWFuY2Ugb3DDqXJhdGlvbm5lbGxlLCBkJ3VuZSBwdWlzc2FuY2UgdW5pdGFpcmUg4omkIDcsNCBrVkEgLSB1c2FnZSBwcmluY2lwYWwgcHJvZmVzc2lvbm5lbC4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogNjciKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb3B0aW9ubmVsbGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBub21icmUgZW50aWVyIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgc3Vww6lyaWV1ciDDoCAwIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgInByb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLW9jY2FzaW9ubmVsLXRyYW5zaXQtaW50ZXJ2YWxsZS0xIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoIm9iamVjdGlmc19uYl9wZGNfdXNhZ2Vfb2NjYXNpb25uZWxfdHJhbnNpdF9pbnRlcnZhbGxlXzEiKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IE9iamVjdGlmcyAtIE5vbWJyZSB0b3RhbCBkZSBwb2ludHMgZGUgY2hhcmdlIG91dmVydHMgYXUgcHVibGljIMOgIGwnw6ljaMOpYW5jZSBvcMOpcmF0aW9ubmVsbGUsIGQndW5lIHB1aXNzYW5jZSB1bml0YWlyZSDiiaQgNyw0IGtWQSAtIHVzYWdlIHByaW5jaXBhbCBvY2Nhc2lvbm5lbC90cmFuc2l0LiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA2NyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogInByb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLXJlc2lkZW50aWVsLWludGVydmFsbGUtMiIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Jlc2lkZW50aWVsX2ludGVydmFsbGVfMiIpCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogT2JqZWN0aWZzIC0gTm9tYnJlIHRvdGFsIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgw6AgbCfDqWNow6lhbmNlIG9ww6lyYXRpb25uZWxsZSwgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlID4gNyw0IGtWQSBldCDiiaQgMjIgIGtWQSAtIHVzYWdlIHByaW5jaXBhbCByw6lzaWRlbnRpZWwuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9wdGlvbm5lbGxlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAicHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2UtcHJvZmVzc2lvbm5lbC1pbnRlcnZhbGxlLTIiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigib2JqZWN0aWZzX25iX3BkY191c2FnZV9wcm9mZXNzaW9ubmVsX2ludGVydmFsbGVfMiIpCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogT2JqZWN0aWZzIC0gTm9tYnJlIHRvdGFsIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgw6AgbCfDqWNow6lhbmNlIG9ww6lyYXRpb25uZWxsZSwgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlID4gNyw0IGtWQSBldCDiiaQgMjIgIGtWQSAtIHVzYWdlIHByaW5jaXBhbCBwcm9mZXNzaW9ubmVsLiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA2NyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAicHJvcHJpZXRlLW9iamVjdGlmcy1uYi1wZGMtdXNhZ2Utb2NjYXNpb25uZWwtdHJhbnNpdC1pbnRlcnZhbGxlLTIiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigib2JqZWN0aWZzX25iX3BkY191c2FnZV9vY2Nhc2lvbm5lbF90cmFuc2l0X2ludGVydmFsbGVfMiIpCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogT2JqZWN0aWZzIC0gTm9tYnJlIHRvdGFsIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgw6AgbCfDqWNow6lhbmNlIG9ww6lyYXRpb25uZWxsZSwgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlID4gNyw0IGtWQSBldCDiiaQgMjIgIGtWQSAtIHVzYWdlIHByaW5jaXBhbCBvY2Nhc2lvbm5lbC90cmFuc2l0LiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA2NyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogInByb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLXJlc2lkZW50aWVsLWludGVydmFsbGUtMyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Jlc2lkZW50aWVsX2ludGVydmFsbGVfMyIpCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogT2JqZWN0aWZzIC0gTm9tYnJlIHRvdGFsIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgw6AgbCfDqWNow6lhbmNlIG9ww6lyYXRpb25uZWxsZSwgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlID4gMjIga1ZBIGV0IDwgMTUwICBrVkEgLSB1c2FnZSBwcmluY2lwYWwgcsOpc2lkZW50aWVsLiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA2NyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogInByb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLXByb2Zlc3Npb25uZWwtaW50ZXJ2YWxsZS0zIgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoIm9iamVjdGlmc19uYl9wZGNfdXNhZ2VfcHJvZmVzc2lvbm5lbF9pbnRlcnZhbGxlXzMiKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IE9iamVjdGlmcyAtIE5vbWJyZSB0b3RhbCBkZSBwb2ludHMgZGUgY2hhcmdlIG91dmVydHMgYXUgcHVibGljIMOgIGwnw6ljaMOpYW5jZSBvcMOpcmF0aW9ubmVsbGUsIGQndW5lIHB1aXNzYW5jZSB1bml0YWlyZSA+IDIyIGtWQSBldCA8IDE1MCAga1ZBIC0gdXNhZ2UgcHJpbmNpcGFsIHByb2Zlc3Npb25uZWwuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDY3IikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9wdGlvbm5lbGxlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIHN1cMOpcmlldXIgw6AgMCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOgogICAgICAgICAgICAgICJwcm9wcmlldGUtb2JqZWN0aWZzLW5iLXBkYy11c2FnZS1vY2Nhc2lvbm5lbC10cmFuc2l0LWludGVydmFsbGUtMyIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX29jY2FzaW9ubmVsX3RyYW5zaXRfaW50ZXJ2YWxsZV8zIikKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBPYmplY3RpZnMgLSBOb21icmUgdG90YWwgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyDDoCBsJ8OpY2jDqWFuY2Ugb3DDqXJhdGlvbm5lbGxlLCBkJ3VuZSBwdWlzc2FuY2UgdW5pdGFpcmUgPiAyMiBrVkEgZXQgPCAxNTAgIGtWQSAtIHVzYWdlIHByaW5jaXBhbCBvY2Nhc2lvbm5lbC90cmFuc2l0LiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA2NyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogInByb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLXJlc2lkZW50aWVsLWludGVydmFsbGUtNCIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Jlc2lkZW50aWVsX2ludGVydmFsbGVfNCIpCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogT2JqZWN0aWZzIC0gTm9tYnJlIHRvdGFsIGRlIHBvaW50cyBkZSBjaGFyZ2Ugb3V2ZXJ0cyBhdSBwdWJsaWMgw6AgbCfDqWNow6lhbmNlIG9ww6lyYXRpb25uZWxsZSwgZCd1bmUgcHVpc3NhbmNlIHVuaXRhaXJlIOKJpSAxNTAga1ZBIC0gdXNhZ2UgcHJpbmNpcGFsIHLDqXNpZGVudGllbC4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogNjciKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb3B0aW9ubmVsbGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBub21icmUgZW50aWVyIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgc3Vww6lyaWV1ciDDoCAwIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJwcm9wcmlldGUtb2JqZWN0aWZzLW5iLXBkYy11c2FnZS1wcm9mZXNzaW9ubmVsLWludGVydmFsbGUtNCIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJvYmplY3RpZnNfbmJfcGRjX3VzYWdlX3Byb2Zlc3Npb25uZWxfaW50ZXJ2YWxsZV80IikKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBPYmplY3RpZnMgLSBOb21icmUgdG90YWwgZGUgcG9pbnRzIGRlIGNoYXJnZSBvdXZlcnRzIGF1IHB1YmxpYyDDoCBsJ8OpY2jDqWFuY2Ugb3DDqXJhdGlvbm5lbGxlLCBkJ3VuZSBwdWlzc2FuY2UgdW5pdGFpcmUg4omlIDE1MCBrVkEgLSB1c2FnZSBwcmluY2lwYWwgcHJvZmVzc2lvbm5lbC4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogNjciKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb3B0aW9ubmVsbGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBub21icmUgZW50aWVyIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgc3Vww6lyaWV1ciDDoCAwIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgInByb3ByaWV0ZS1vYmplY3RpZnMtbmItcGRjLXVzYWdlLW9jY2FzaW9ubmVsLXRyYW5zaXQtaW50ZXJ2YWxsZS00IgogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJQcm9wcmnDqXTDqSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoIm9iamVjdGlmc19uYl9wZGNfdXNhZ2Vfb2NjYXNpb25uZWxfdHJhbnNpdF9pbnRlcnZhbGxlXzQiKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IE9iamVjdGlmcyAtIE5vbWJyZSB0b3RhbCBkZSBwb2ludHMgZGUgY2hhcmdlIG91dmVydHMgYXUgcHVibGljIMOgIGwnw6ljaMOpYW5jZSBvcMOpcmF0aW9ubmVsbGUsIGQndW5lIHB1aXNzYW5jZSB1bml0YWlyZSDiiaUgMTUwIGtWQSAtIHVzYWdlIHByaW5jaXBhbCBvY2Nhc2lvbm5lbC90cmFuc2l0LiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA2NyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBzdXDDqXJpZXVyIMOgIDAiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInByb3ByaWV0ZS11cmwtc2RpcnZlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlByb3ByacOpdMOpICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidXJsX3NkaXJ2ZSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IEFkcmVzc2UgVVJMIG/DuSBsZSBTRElSVkUgZGUgbGEgY29sbGVjdGl2aXTDqSBwZXV0IMOqdHJlIHTDqWzDqWNoYXJnw6kuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IGh0dHBzOi8vd3d3LmV4ZW1wbGUuZnIvc3RhdGlvbm5lbWVudHJlcHVibGlxdWUvIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9wdGlvbm5lbGxlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlR5cGUgOiBjaGHDrm5lIGRlIGNhcmFjdMOocmVzIChmb3JtYXQgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInVyaSIpXSksCiAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}