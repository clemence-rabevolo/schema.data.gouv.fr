{"remainingRequest":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/.vuepress/theme/global-components/InventoryBase.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/.vuepress/theme/global-components/InventoryBase.vue","mtime":1628086293276},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBtb21lbnQgZnJvbSAibW9tZW50IjsKCmNvbnN0IG1hcHBpbmcgPSB7CiAgdHlwZTogewogICAgbGFiZWw6ICJUeXBlIiwKICAgIHNvdXJjZTogIkRvbm7DqWVzLCBBUEkgb3UgY29kZSBzb3VyY2UiLAogIH0sCiAgdGl0bGU6IHsKICAgIGxhYmVsOiAiVGl0cmUiLAogICAgc291cmNlOiAiRG9ubsOpZXMsIEFQSSwgQ29kZXMgc291cmNlcyBjb25jZXJuw6lzIiwKICAgIGZvcm1hdDogKGNlbGwsIHJvdykgPT4KICAgICAgcm93LnJhdy5VUkwgPyBgPGEgaHJlZj0iJHtyb3cucmF3LlVSTH0iPiR7Y2VsbH08L2E+YCA6IGNlbGwsCiAgfSwKICBvcmdhbml6YXRpb246IHsKICAgIGxhYmVsOiAiTWluaXN0w6hyZSIsCiAgICBzb3VyY2U6ICJNaW5pc3TDqHJlIiwKICB9LAogIHN0YXR1czogewogICAgbGFiZWw6ICJTdGF0dXQgZOKAmW91dmVydHVyZSIsCiAgICBzb3VyY2U6ICLDiXRhdCBkJ2F2YW5jZW1lbnQiLAogICAgZm9ybWF0OiAoY2VsbCwgcm93KSA9PgogICAgICBgPHNwYW4gY2xhc3M9ImZyLXRhZyAke3Jvdy5zdGF0dXMuX2NsYXNzfSI+JHtjZWxsLmxhYmVsfTwvYT5gLAogICAgd2lkdGg6ICIxMmVtIiwKICB9LAogIGRhdGU6IHsKICAgIGxhYmVsOiAiRGF0ZSBlc3RpbcOpZSBkZSBwdWJsaWNhdGlvbiIsCiAgICBzb3VyY2U6ICLDiWNow6lhbmNlIGFubm9uY8OpZSBwYXIgbGVzIG1pbmlzdMOocmVzIiwKICAgIGZvcm1hdDogKGNlbGwsIHJvdykgPT4gewogICAgICBjb25zdCBkYXRlID0gcm93LmRhdGU7CiAgICAgIGNvbnN0IFt0cmltZXN0ZXIsIHllYXJdID0gZGF0ZS5zcGxpdCgiICIpOwoKICAgICAgaWYgKAogICAgICAgIHJvdy5zdGF0dXMua2V5ICE9ICJvcGVuIiAmJgogICAgICAgIG1vbWVudCgpLnllYXIoKSA+PSBwYXJzZUludCh5ZWFyKSAmJgogICAgICAgIG1vbWVudCgpLnF1YXJ0ZXIoKSA+IHBhcnNlSW50KHRyaW1lc3RlclsxXSkKICAgICAgKSB7CiAgICAgICAgcmV0dXJuIGBUJHttb21lbnQoKS5xdWFydGVyKCl9ICR7bW9tZW50KCkueWVhcigpfWA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGAke3RyaW1lc3Rlcn0gJHt5ZWFyfWA7CiAgICAgIH0KICAgIH0sCiAgfSwKfTsKCmNvbnN0IHN0YXR1c2VzID0gWwogIHsKICAgIGxhYmVsOiAiRGlzcG9uaWJsZSIsCiAgICBrZXk6ICJvcGVuIiwKICAgIHZpc2libGU6IHRydWUsCiAgICBfY2xhc3M6ICJncmVlbiIsCiAgICBsYWJlbEV4dGVuZGVkOiAiZGlzcG9uYmlsZXMiLAogIH0sCiAgewogICAgbGFiZWw6ICJQbGFuaWZpw6kiLAogICAga2V5OiAib3BlbmluZyIsCiAgICB2aXNpYmxlOiB0cnVlLAogICAgX2NsYXNzOiAieWVsbG93IiwKICAgIGxhYmVsRXh0ZW5kZWQ6ICJwbGFuaWZpw6lzIiwKICB9LAogIHsKICAgIGxhYmVsOiAiTm9uIGRpc3BvbmlibGUiLAogICAga2V5OiAibm90b3BlbiIsCiAgICB2aXNpYmxlOiB0cnVlLAogICAgX2NsYXNzOiAicmVkIiwKICAgIGxhYmVsRXh0ZW5kZWQ6ICJub24gZGlzcG9uaWJsZXMiLAogIH0sCl07CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIkludmVudG9yeUJhc2UiLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzdGF0dXNlcywKICAgICAgbG9hZGluZzogdHJ1ZSwKICAgICAgcXVlcnk6ICIiLAogICAgICBkYXRhc2V0czogW10sCiAgICAgIGxhc3RNb2RpZmllZDogbnVsbCwKICAgICAgbWFwcGluZywKICAgICAgY29sdW1uczogT2JqZWN0LnZhbHVlcygKICAgICAgICBPYmplY3QuZW50cmllcyhtYXBwaW5nKS5tYXAoKHIpID0+ICh7IGtleTogclswXSwgLi4uclsxXSB9KSkKICAgICAgKSwKICAgICAgZmlsdGVyczoge30sCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGZpbHRlcmVkRGF0YXNldHMoKSB7CiAgICAgIGxldCBkYXRhc2V0cyA9IHRoaXMuZGF0YXNldHMuc2xpY2UoKTsKCiAgICAgIGRhdGFzZXRzID0gZGF0YXNldHMKICAgICAgICAuZmlsdGVyKChkKSA9PiBkLnN0YXR1cy52aXNpYmxlID09IHRydWUpCiAgICAgICAgLmZpbHRlcigoZCkgPT4gIXRoaXMuZmlsdGVycy50eXBlIHx8IGQudHlwZSA9PSB0aGlzLmZpbHRlcnMudHlwZSkKICAgICAgICAuZmlsdGVyKAogICAgICAgICAgKGQpID0+ICF0aGlzLmZpbHRlcnMuc3RhdHVzIHx8IGQuc3RhdHVzLmxhYmVsID09IHRoaXMuZmlsdGVycy5zdGF0dXMKICAgICAgICApCiAgICAgICAgLmZpbHRlcigoZCkgPT4gIXRoaXMuZmlsdGVycy5vcmcgfHwgZC5vcmdhbml6YXRpb24gPT0gdGhpcy5maWx0ZXJzLm9yZykKICAgICAgICAuZmlsdGVyKAogICAgICAgICAgKGQpID0+ICF0aGlzLmZpbHRlcnMudHJpbWVzdGVyIHx8IGQuZGF0ZSA9PSB0aGlzLmZpbHRlcnMudHJpbWVzdGVyCiAgICAgICAgKTsKCiAgICAgIGlmICh0aGlzLnF1ZXJ5Lmxlbmd0aCA8IDMpIHJldHVybiBkYXRhc2V0czsKCiAgICAgIGRhdGFzZXRzID0gZGF0YXNldHMuZmlsdGVyKChkYXRhc2V0KSA9PiB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG1hcHBpbmcpLnNvbWUoKGZpZWxkKSA9PiB7CiAgICAgICAgICBpZiAoIWRhdGFzZXRbZmllbGRdIHx8ICFkYXRhc2V0W2ZpZWxkXS50b0xvd2VyQ2FzZSkgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgIHJldHVybiBkYXRhc2V0W2ZpZWxkXQogICAgICAgICAgICAudG9Mb3dlckNhc2UoKQogICAgICAgICAgICAuaW5jbHVkZXModGhpcy5xdWVyeS50b0xvd2VyQ2FzZSgpKTsKICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICByZXR1cm4gZGF0YXNldHM7CiAgICB9LAogICAgZmlsdGVyZWRTb3J0ZWREYXRhc2V0cygpIHsKICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyZWREYXRhc2V0cy5zbGljZSgpLnNvcnQodGhpcy5jb21wYXJlVHJpbWVzdGVycyk7CiAgICB9LAogICAgY291bnRlcnMoKSB7CiAgICAgIGNvbnN0IGNvdW50ID0gewogICAgICAgIGNsb3NlZDogMCwKICAgICAgICBvcGVuaW5nOiAwLAogICAgICAgIHByZXZpZXc6IDAsCiAgICAgICAgb3BlbjogMCwKICAgICAgICBub3RvcGVuOiAwLAogICAgICB9OwogICAgICB0aGlzLmZpbHRlcmVkRGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCkgPT4gewogICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YXNldC5zdGF0dXM7CiAgICAgICAgY29uc3Qgc3RhdHVzID0gdGhpcy5zdGF0dXNlcy5maW5kKChzKSA9PiBzLmxhYmVsID09IHZhbHVlKTsKICAgICAgICBpZiAoc3RhdHVzKSB7CiAgICAgICAgICBjb3VudFtzdGF0dXMua2V5XSArPSAxOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHJldHVybiBjb3VudDsKICAgIH0sCiAgICBvcmdhbml6YXRpb25zKCkgewogICAgICBsZXQgb3JncyA9IHRoaXMuZGF0YXNldHMubWFwKChkYXRhc2V0KSA9PiBkYXRhc2V0Lm9yZ2FuaXphdGlvbik7CiAgICAgIG9yZ3MgPSBbLi4ubmV3IFNldChvcmdzKV07CiAgICAgIG9yZ3MgPSBvcmdzLm1hcCgobykgPT4gKHsKICAgICAgICBsYWJlbDogbywKICAgICAgICBrZXk6IG8sCiAgICAgICAgY291bnQ6IHRoaXMuZmlsdGVyZWREYXRhc2V0cy5maWx0ZXIoKGQpID0+IGQub3JnYW5pemF0aW9uID09IG8pLmxlbmd0aCwKICAgICAgfSkpOwogICAgICBvcmdzLnNvcnQoKGEsIGIpID0+IGIuY291bnQgLSBhLmNvdW50KTsKICAgICAgcmV0dXJuIG9yZ3M7CiAgICB9LAogICAgdHJpbWVzdGVycygpIHsKICAgICAgY29uc3QgdHJpbWVzdGVycyA9IFsKICAgICAgICAuLi5uZXcgU2V0KAogICAgICAgICAgdGhpcy5kYXRhc2V0cwogICAgICAgICAgICAuc29ydCh0aGlzLmNvbXBhcmVUcmltZXN0ZXJzKQogICAgICAgICAgICAubWFwKChkYXRhc2V0KSA9PiBkYXRhc2V0LmRhdGUpCiAgICAgICAgKSwKICAgICAgXTsKICAgICAgcmV0dXJuIHRyaW1lc3RlcnMubWFwKCh0KSA9PiAoeyBsYWJlbDogdCwga2V5OiB0IH0pKTsKICAgIH0sCiAgICB0eXBlcygpIHsKICAgICAgY29uc3QgdHlwZXMgPSBbLi4ubmV3IFNldCh0aGlzLmRhdGFzZXRzLm1hcCgoZGF0YXNldCkgPT4gZGF0YXNldC50eXBlKSldOwogICAgICByZXR1cm4gdHlwZXMubWFwKCh0KSA9PiAoeyBsYWJlbDogdCwga2V5OiB0IH0pKTsKICAgIH0sCiAgfSwKICBtb3VudGVkKCkge30sCiAgbWV0aG9kczogewogICAgY29tcGFyZVRyaW1lc3RlcnMoYSwgYikgewogICAgICBjb25zdCB0YSA9IGEuZGF0ZS5zcGxpdCgiICIpWzFdICsgYS5kYXRlLnNwbGl0KCIgIilbMF07CiAgICAgIGNvbnN0IHRiID0gYi5kYXRlLnNwbGl0KCIgIilbMV0gKyBiLmRhdGUuc3BsaXQoIiAiKVswXTsKICAgICAgcmV0dXJuIHRhLmxvY2FsZUNvbXBhcmUodGIpOwogICAgfSwKICAgIHRvZ2dsZShiYWRnZSkgewogICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLnN0YXR1c2VzLmZpbmQoKHMpID0+IHMua2V5ID09IGJhZGdlKTsKICAgICAgc3RhdHVzLnZpc2libGUgPSAhc3RhdHVzLnZpc2libGU7CiAgICB9LAogICAgZm9ybWF0RGF0ZShzdHIpIHsKICAgICAgcmV0dXJuIG1vbWVudChzdHIpLmZvcm1hdCgiREQvTU0vWVlZWSIpOwogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["InventoryBase.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"InventoryBase.vue","sourceRoot":"site/.vuepress/theme/global-components","sourcesContent":["<template>\n  <div>\n    <InventoryDataProxy\n      :mapping=\"mapping\"\n      :statuses=\"statuses\"\n      @input=\"\n        datasets = $event.datasets;\n        lastModified = $event.lastModified;\n      \"\n    />\n\n    <div v-if=\"datasets.length > 0\">\n      <InventoryFilter\n        v-model=\"filters\"\n        :types=\"types\"\n        :statuses=\"statuses\"\n        :trimesters=\"trimesters\"\n        :organizations=\"organizations\"\n      />\n\n      <InventoryTable :datasets=\"filteredSortedDatasets\" :columns=\"columns\" />\n\n      <p>Dernière modification : {{ formatDate(lastModified) }}</p>\n    </div>\n    <div v-else>\n      <em>Données en cours de chargement...</em>\n    </div>\n  </div>\n</template>\n\n<script>\nimport moment from \"moment\";\n\nconst mapping = {\n  type: {\n    label: \"Type\",\n    source: \"Données, API ou code source\",\n  },\n  title: {\n    label: \"Titre\",\n    source: \"Données, API, Codes sources concernés\",\n    format: (cell, row) =>\n      row.raw.URL ? `<a href=\"${row.raw.URL}\">${cell}</a>` : cell,\n  },\n  organization: {\n    label: \"Ministère\",\n    source: \"Ministère\",\n  },\n  status: {\n    label: \"Statut d’ouverture\",\n    source: \"État d'avancement\",\n    format: (cell, row) =>\n      `<span class=\"fr-tag ${row.status._class}\">${cell.label}</a>`,\n    width: \"12em\",\n  },\n  date: {\n    label: \"Date estimée de publication\",\n    source: \"Échéance annoncée par les ministères\",\n    format: (cell, row) => {\n      const date = row.date;\n      const [trimester, year] = date.split(\" \");\n\n      if (\n        row.status.key != \"open\" &&\n        moment().year() >= parseInt(year) &&\n        moment().quarter() > parseInt(trimester[1])\n      ) {\n        return `T${moment().quarter()} ${moment().year()}`;\n      } else {\n        return `${trimester} ${year}`;\n      }\n    },\n  },\n};\n\nconst statuses = [\n  {\n    label: \"Disponible\",\n    key: \"open\",\n    visible: true,\n    _class: \"green\",\n    labelExtended: \"disponbiles\",\n  },\n  {\n    label: \"Planifié\",\n    key: \"opening\",\n    visible: true,\n    _class: \"yellow\",\n    labelExtended: \"planifiés\",\n  },\n  {\n    label: \"Non disponible\",\n    key: \"notopen\",\n    visible: true,\n    _class: \"red\",\n    labelExtended: \"non disponibles\",\n  },\n];\n\nexport default {\n  name: \"InventoryBase\",\n  data() {\n    return {\n      statuses,\n      loading: true,\n      query: \"\",\n      datasets: [],\n      lastModified: null,\n      mapping,\n      columns: Object.values(\n        Object.entries(mapping).map((r) => ({ key: r[0], ...r[1] }))\n      ),\n      filters: {},\n    };\n  },\n  computed: {\n    filteredDatasets() {\n      let datasets = this.datasets.slice();\n\n      datasets = datasets\n        .filter((d) => d.status.visible == true)\n        .filter((d) => !this.filters.type || d.type == this.filters.type)\n        .filter(\n          (d) => !this.filters.status || d.status.label == this.filters.status\n        )\n        .filter((d) => !this.filters.org || d.organization == this.filters.org)\n        .filter(\n          (d) => !this.filters.trimester || d.date == this.filters.trimester\n        );\n\n      if (this.query.length < 3) return datasets;\n\n      datasets = datasets.filter((dataset) => {\n        return Object.keys(mapping).some((field) => {\n          if (!dataset[field] || !dataset[field].toLowerCase) return false;\n\n          return dataset[field]\n            .toLowerCase()\n            .includes(this.query.toLowerCase());\n        });\n      });\n\n      return datasets;\n    },\n    filteredSortedDatasets() {\n      return this.filteredDatasets.slice().sort(this.compareTrimesters);\n    },\n    counters() {\n      const count = {\n        closed: 0,\n        opening: 0,\n        preview: 0,\n        open: 0,\n        notopen: 0,\n      };\n      this.filteredDatasets.forEach((dataset) => {\n        const value = dataset.status;\n        const status = this.statuses.find((s) => s.label == value);\n        if (status) {\n          count[status.key] += 1;\n        }\n      });\n      return count;\n    },\n    organizations() {\n      let orgs = this.datasets.map((dataset) => dataset.organization);\n      orgs = [...new Set(orgs)];\n      orgs = orgs.map((o) => ({\n        label: o,\n        key: o,\n        count: this.filteredDatasets.filter((d) => d.organization == o).length,\n      }));\n      orgs.sort((a, b) => b.count - a.count);\n      return orgs;\n    },\n    trimesters() {\n      const trimesters = [\n        ...new Set(\n          this.datasets\n            .sort(this.compareTrimesters)\n            .map((dataset) => dataset.date)\n        ),\n      ];\n      return trimesters.map((t) => ({ label: t, key: t }));\n    },\n    types() {\n      const types = [...new Set(this.datasets.map((dataset) => dataset.type))];\n      return types.map((t) => ({ label: t, key: t }));\n    },\n  },\n  mounted() {},\n  methods: {\n    compareTrimesters(a, b) {\n      const ta = a.date.split(\" \")[1] + a.date.split(\" \")[0];\n      const tb = b.date.split(\" \")[1] + b.date.split(\" \")[0];\n      return ta.localeCompare(tb);\n    },\n    toggle(badge) {\n      const status = this.statuses.find((s) => s.key == badge);\n      status.visible = !status.visible;\n    },\n    formatDate(str) {\n      return moment(str).format(\"DD/MM/YYYY\");\n    },\n  },\n};\n</script>\n\n<style>\n.fr-tag.green {\n  background-color: #00ac8c;\n  color: white;\n}\n.fr-tag.yellow {\n  background-color: #fdcf41;\n}\n.fr-tag.red {\n  background-color: #ff6f4c;\n}\n</style>\n"]}]}