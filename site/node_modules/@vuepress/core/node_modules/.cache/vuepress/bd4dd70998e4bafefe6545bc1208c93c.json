{"remainingRequest":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js??ref--1-1!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/schemas/scdl/deliberations/2.1.2/documentation.md?vue&type=template&id=4d265be9&","dependencies":[{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/site/schemas/scdl/deliberations/2.1.2/documentation.md","mtime":1628251493779},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/geof/projects/refonte-schema/schema.data.gouv.fr/site/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJNZW51U2NoZW1hIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGVsaWJlcmF0aW9ucyIgfSB9LCBbX3ZtLl92KCJEw6lsaWLDqXJhdGlvbnMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNww6ljaWZpY2F0aW9uIGR1IG1vZMOobGUgZGUgZG9ubsOpZXMgcmVsYXRpZiBhdXggZMOpbGliw6lyYXRpb25zIGFkb3B0w6llcyBwYXIgdW5lIGNvbGxlY3Rpdml0w6kgbG9jYWxlIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiQXV0ZXVyIDogT3BlbkRhdGFGcmFuY2UiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlNjaMOpbWEgY3LDqcOpIGxlIDogMjMvMDUvMjAxOCIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJTaXRlIHdlYiA6IGh0dHBzOi8vZ2l0Lm9wZW5kYXRhZnJhbmNlLm5ldC9zY2RsL2RlbGliZXJhdGlvbnMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZlcnNpb24gOiAyLjEuMiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibW9kZWxlLWRlLWRvbm5lZXMiIH0gfSwgWwogICAgICAgIF92bS5fdigiTW9kw6hsZSBkZSBkb25uw6llcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg1IiwgeyBhdHRyczogeyBpZDogImxpc3RlLWRlcy1wcm9wcmlldGVzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkxpc3RlIGRlcyBwcm9wcmnDqXTDqXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0YWJsZSIsIFsKICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIlByb3ByacOpdMOpIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIFtfdm0uX3YoIlR5cGUiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgW192bS5fdigiT2JsaWdhdG9pcmUiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI25vbS1kZS1sYS1jb2xsZWN0aXZpdGUtcHJvcHJpZXRlLWNvbGwtbm9tIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiQ09MTF9OT00iKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogIiNjb2RlLXNpcmV0LWRlLWxhLWNvbGxlY3Rpdml0ZS1wcm9wcmlldGUtY29sbC1zaXJldCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNPTExfU0lSRVQiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogIiNpZGVudGlmaWFudC1kZS1sYS1kZWxpYmVyYXRpb24tcHJvcHJpZXRlLWRlbGliLWlkIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiREVMSUJfSUQiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjZGF0ZS1kJ2Fkb3B0aW9uLWRlLWxhLWRlbGliZXJhdGlvbi1wcm9wcmlldGUtZGVsaWItZGF0ZSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkRFTElCX0RBVEUiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiZGF0ZSIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjY29kZS1kZS1tYXRpZXJlLWlzc3UtZGUtbGEtbm9tZW5jbGF0dXJlLWFjdGVzLXByb3ByaWV0ZS1kZWxpYi1tYXRpZXJlLWNvZGUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJERUxJQl9NQVRJRVJFX0NPREUiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbm9tLWRlLW1hdGllcmUtcHJvcHJpZXRlLWRlbGliLW1hdGllcmUtbm9tIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiREVMSUJfTUFUSUVSRV9OT00iKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjogIiNvYmpldC1kZS1sYS1kZWxpYmVyYXRpb24tcHJvcHJpZXRlLWRlbGliLW9iamV0IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiREVMSUJfT0JKRVQiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJPdWkiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjYW5uZWUtZHUtYnVkZ2V0LXByb3ByaWV0ZS1idWRnZXQtYW5uZWUiIH0gfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkJVREdFVF9BTk5FRSIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJjaGHDrm5lIGRlIGNhcmFjdMOocmVzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk5vbmUiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjbm9tLWR1LWJ1ZGdldC1wcm9wcmlldGUtYnVkZ2V0LW5vbSIgfSB9LAogICAgICAgICAgICAgICAgW192bS5fdigiQlVER0VUX05PTSIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJjaGHDrm5lIGRlIGNhcmFjdMOocmVzIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk5vbiIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgIiNpZGVudGlmaWFudC1kZS1sJ2VudGl0ZS1leGVyY2FudC1sZS1jb250cm9sZS1kZS1sZWdhbGl0ZS1wcm9wcmlldGUtcHJlZi1pZCIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIlBSRUZfSUQiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjZGF0ZS1kJ2VucmVnaXN0cmVtZW50LWRlLWxhLWRlbGliZXJhdGlvbi1hdXByZXMtZHUtY29udHJvbGUtZGUtbGVnYWxpdGUtcHJvcHJpZXRlLXByZWYtZGF0ZSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIlBSRUZfREFURSIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJkYXRlIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk5vbiIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICAgIiNlZmZlY3RpZi10aGVvcmlxdWUtZGVzLXZvdGFudHMtcHJvcHJpZXRlLXZvdGUtZWZmZWN0aWYiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJWT1RFX0VGRkVDVElGIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm9uIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGhyZWY6ICIjZWZmZWN0aWYtcmVlbC1kZXMtdm90YW50cy1wcm9wcmlldGUtdm90ZS1yZWVsIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiVk9URV9SRUVMIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIm5vbWJyZSBlbnRpZXIiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigiTm9uIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3BvdXItcHJvcHJpZXRlLXZvdGUtcG91ciIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlZPVEVfUE9VUiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJub21icmUgZW50aWVyIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIk5vbiIpXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjb250cmUtcHJvcHJpZXRlLXZvdGUtY29udHJlIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiVk9URV9DT05UUkUiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjYWJzdGVudGlvbi1wcm9wcmlldGUtdm90ZS1hYnN0ZW50aW9uIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJWT1RFX0FCU1RFTlRJT04iKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgW192bS5fdigibm9tYnJlIGVudGllciIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICAgICAgICIjbGllbi12ZXJzLWxlLWRvY3VtZW50LWRlLWxhLWRlbGliZXJhdGlvbi1wcm9wcmlldGUtZGVsaWItdXJsIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigiREVMSUJfVVJMIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoImNoYcOubmUgZGUgY2FyYWN0w6hyZXMgKGZvcm1hdCAiKSwKICAgICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInVyaSIpXSksCiAgICAgICAgICAgICAgX3ZtLl92KCIpIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCJOb24iKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogIm5vbS1kZS1sYS1jb2xsZWN0aXZpdGUtcHJvcHJpZXRlLWNvbGwtbm9tIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIk5vbSBkZSBsYSBjb2xsZWN0aXZpdMOpIC0gUHJvcHJpw6l0w6kgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJDT0xMX05PTSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IE5vbSBvZmZpY2llbCBkZSBsYSBjb2xsZWN0aXZpdMOpIGTDqWxpYsOpcmFudGUuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IFZpbGxlIGRlIFBvaXRpZXJzIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJjb2RlLXNpcmV0LWRlLWxhLWNvbGxlY3Rpdml0ZS1wcm9wcmlldGUtY29sbC1zaXJldCIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiQ29kZSBTSVJFVCBkZSBsYSBjb2xsZWN0aXZpdMOpIC0gUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkNPTExfU0lSRVQiKV0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigiRGVzY3JpcHRpb24gOiBJZGVudGlmaWFudCBkdSAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vZnIud2lraXBlZGlhLm9yZy93aWtpL1N5c3QlQzMlQThtZV9kJTI3aWRlbnRpZmljYXRpb25fZHVfciVDMyVBOXBlcnRvaXJlX2Rlc18lQzMlQTl0YWJsaXNzZW1lbnRzIiwKICAgICAgICAgICAgICAgICAgdGFyZ2V0OiAiIiwKICAgICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgIlN5c3TDqG1lIGQnSWRlbnRpZmljYXRpb24gZHUgUsOpcGVydG9pcmUgZGVzIEV0YWJsaXNzZW1lbnRzIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgKFNJUkVUKSBkZSBsYSBjb2xsZWN0aXZpdMOpIHF1aSBhIGFkb3B0w6kgbGEgZMOpbGliw6lyYXRpb24sIGNvbXBvc8OpIGRlIDkgY2hpZmZyZXMgU0lSRU4gKyA1IGNoaWZmcmVzIE5JQyBk4oCZdW4gc2V1bCB0ZW5hbnQuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDIxODYwMTk0NjAwMDEzIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9ibGlnYXRvaXJlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogY2hhw65uZSBkZSBjYXJhY3TDqHJlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiTW90aWYgOiAiKSwgX2MoImNvZGUiLCBbX3ZtLl92KCJeXFxkezE0fSQiKV0pXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJpZGVudGlmaWFudC1kZS1sYS1kZWxpYmVyYXRpb24tcHJvcHJpZXRlLWRlbGliLWlkIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJJZGVudGlmaWFudCBkZSBsYSBkw6lsaWLDqXJhdGlvbiAtIFByb3ByacOpdMOpICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJERUxJQl9JRCIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IElkZW50aWZpYW50IGludGVybmUgZGUgZMOpbGliw6lyYXRpb24gcmVzcGVjdGFudCBsZSBmb3JtYWxpc21lIHByb3ByZSDDoCBsYSBjb2xsZWN0aXZpdMOpLiBTYSBjb21wb3NpdGlvbiBkw6lwZW5kIGRlcyBwcmF0aXF1ZXMgZW4gdmlndWV1ciBhdSBzZWluIGRlIGNoYXF1ZSBjb2xsZWN0aXZpdMOpLiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiAxREwxNTQ5NCIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IGNoYcOubmUgZGUgY2FyYWN0w6hyZXMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogImRhdGUtZC1hZG9wdGlvbi1kZS1sYS1kZWxpYmVyYXRpb24tcHJvcHJpZXRlLWRlbGliLWRhdGUiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkRhdGUgZCdhZG9wdGlvbiBkZSBsYSBkw6lsaWLDqXJhdGlvbiAtIFByb3ByacOpdMOpICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJERUxJQl9EQVRFIildKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogRGF0ZSBkZSBkw6ljaXNpb24gZGUgbCdhY3RlLCBjZWxsZSDDoCBsYXF1ZWxsZSBsYSBkw6lsaWLDqXJhdGlvbiBhIMOpdMOpIGFkb3B0w6kgcGFyIGxhIGNvbGxlY3Rpdml0w6kgYXUgZm9ybWF0IEFBQUEtTU0tSkogc3VpdmFudCBsYSBub3JtZSBpbnRlcm5hdGlvbmFsZSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly9mci53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICIiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiSVNPIDg2MDEiKV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogMjAxNy0xMC0xNSIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IGRhdGUiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAiY29kZS1kZS1tYXRpZXJlLWlzc3UtZGUtbGEtbm9tZW5jbGF0dXJlLWFjdGVzLXByb3ByaWV0ZS1kZWxpYi1tYXRpZXJlLWNvZGUiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkNvZGUgZGUgbWF0acOocmUgaXNzdSBkZSBsYSBub21lbmNsYXR1cmUgQUNURVMgLSBQcm9wcmnDqXTDqSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiREVMSUJfTUFUSUVSRV9DT0RFIildKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogQ2UgY29kZSBjb3JyZXNwb25kIMOgIGNlbHVpIGRlIGwnaW5kZXhhdGlvbiBkZSBuaXZlYXUgMiBkYW5zIGxhIHN0cnVjdHVyZSBhcmJvcmVzY2VudGUgZGUgY2xhc3NlbWVudCBlbiBtYXRpw6hyZXMgZXQgc291cy1tYXRpw6hyZXMgKDUgbml2ZWF1eCBkZSBwcm9mb25kZXVyKSBkZSBsYSBub21lbmNsYXR1cmUgQUNURVMgKEFpZGUgYXUgQ29udHLDtGxlIGRlIGzDqWdhbGlUw6kgZMOpbWF0RXJpYWxpU8OpKS4gTGVzIGNvZGVzIGRlIG1hdGnDqHJlIHBldXZlbnQgY29udGVuaXIgbGVzIHZhbGV1cnMgc3VpdmFudGVzIDogJzEuMScgw6AgJzEuNycsICAnMi4xJyDDoCAnMi4zJywgJzMuMScgw6AgJzMuNicsICc0LjEnIMOgICc0LjUnLCAnNS4xJyDDoCAnNS44JywgJzYuMScgw6AgJzYuNScsICc3LjEnIMOgICc3LjEwJywgJzguMScgw6AgOC45JywgJzkuMScgw6AgJzkuNCcuIFNpIGxlIGNoYW1wIGVzdCByZW5zZWlnbsOpLCBzYSB2YWxldXIgZG9pdCBjb3JyZXNwb25kcmUgYXUgbm9tIGRlIG1hdGnDqHJlIGRlICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJERUxJQl9NQVRJRVJFX05PTSIpXSksCiAgICAgICAgICAgIF92bS5fdigiLiIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDguNCIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IGNoYcOubmUgZGUgY2FyYWN0w6hyZXMiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1vdGlmIDogIiksIF9jKCJjb2RlIiwgW192bS5fdigiXlxcZFxcLlxcZHsxLDJ9JCIpXSldKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgeyBhdHRyczogeyBpZDogIm5vbS1kZS1tYXRpZXJlLXByb3ByaWV0ZS1kZWxpYi1tYXRpZXJlLW5vbSIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiTm9tIGRlIG1hdGnDqHJlIC0gUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkRFTElCX01BVElFUkVfTk9NIildKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogQ2Ugbm9tIHBldXQgw6p0cmUgaXNzdSBkZSBsYSBub21lbmNsYXR1cmUgQUNURVMgb3UgZCd1biByw6lmw6lyZW50aWVsIHByb3ByZSDDoCBsYSBjb2xsZWN0aXZpdMOpLiBTJ2lsIGVzdCBpc3N1IGRlIGxhIG5vbWVuY2xhdHVyZSBBQ1RFUywgbGUgY2hhbXAgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkRFTElCX01BVElFUkVfQ09ERSIpXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGRvaXQgw6p0cmUgcmVuc2VpZ27DqSBhdmVjIHVuZSB2YWxldXIgcXVpIHJlcHLDqXNlbnRlIGVmZmVjdGl2ZW1lbnQgbGEgbWF0acOocmUgZMOpZmluaWUuIExlIG5vbSBlc3QgYWxvcnMgY29tcG9zw6kgZGUgbCdpbnRpdHVsw6kgZGUgbWF0acOocmUgZGUgbml2ZWF1IDEgc3VpdmkgZGUgbCdpbnRpdHVsw6kgZGUgc291cy1tYXRpw6hyZSBkZSBuaXZlYXUgMiBwcsOpc2VudHMgZGFucyBsYSAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgICAgICJodHRwOi8vd3d3Lm1vc2VsbGUuZ291di5mci9jb250ZW50L2Rvd25sb2FkLzExMDcvNzk5NC9maWxlL25vbWVuY2xhdHVyZS5wZGYiLAogICAgICAgICAgICAgICAgICB0YXJnZXQ6ICIiLAogICAgICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAic3RydWN0dXJlIGFyYm9yZXNjZW50ZSBkZSBjbGFzc2VtZW50IGRlIGxhIG5vbWVuY2xhdHVyZSBBQ1RFUyIKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIChBaWRlIGF1IENvbnRyw7RsZSBkZSBsw6lnYWxpVMOpIGTDqW1hdEVyaWFsaVPDqSkuIExlcyBkZXV4IGludGl0dWzDqXMgc29udCBleHByaW3DqXMgZW4gbWludXNjdWxlcyBhY2NlbnR1w6llcywgc2FucyB2aXJndWxlIG5pIHBhcmVudGjDqHNlLCBldCBzw6lwYXLDqXMgcGFyIHVuZSBiYXJyZSBvYmxpcXVlLiBTJ2lsIGVzdCBpc3N1IGQndW4gcsOpZsOpcmVudGllbCBkZSB0aMOobWVzIHByb3ByZSDDoCBsYSBjb2xsZWN0aXZpdMOpLCBsZSBub20gZGUgbWF0acOocmUgZXN0IGFsb3JzIHVuZSBjaGHDrm5lIGRlIGNhcmFjdMOocmVzIGxpYnJlIGV0IHNhbnMgY29udHJhaW50ZSBwYXJ0aWN1bGnDqHJlLiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRXggOiAnZG9tYWluZXMgZGUgY29tcMOpdGVuY2VzIHBhciB0aMOobWVzL2Ftw6luYWdlbWVudCBkdSB0ZXJyaXRvaXJlJyBwb3VyIHVuIG5vbSBkZSBtYXRpw6hyZSBpc3N1IGRlIEFDVEVTIG91ICdVUkJBTklTTUUnIHBvdXIgdW4gbm9tIGRlIG1hdGnDqHJlIGlzc3UgZCd1biByw6lmw6lyZW50aWVsIHByb3ByZSDDoCBsYSBjb2xsZWN0aXZpdMOpIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IGNoYcOubmUgZGUgY2FyYWN0w6hyZXMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAib2JqZXQtZGUtbGEtZGVsaWJlcmF0aW9uLXByb3ByaWV0ZS1kZWxpYi1vYmpldCIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiT2JqZXQgZGUgbGEgZMOpbGliw6lyYXRpb24gLSBQcm9wcmnDqXTDqSAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiREVMSUJfT0JKRVQiKV0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigiRGVzY3JpcHRpb24gOiBEZXNjcmlwdGlvbiBkZSBsJ29iamV0IGRlIGxhIGTDqWxpYsOpcmF0aW9uLiIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJFeCA6IExhbmNlbWVudCBkJ3VuZSBkw6ltYXJjaGUgcGFydGVuYXJpYWxlIGRlIGTDqWZpbml0aW9uIGQndW5lIHBvbGl0aXF1ZSBtb250YWduZSBldCBhZGjDqXNpb24gw6AgbCdhc3NvY2lhdGlvbiBuYXRpb25hbGUgZGVzIMOpbHVzIGRlIGxhIG1vbnRhZ25lIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvYmxpZ2F0b2lyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IGNoYcOubmUgZGUgY2FyYWN0w6hyZXMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImFubmVlLWR1LWJ1ZGdldC1wcm9wcmlldGUtYnVkZ2V0LWFubmVlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkFubsOpZSBkdSBidWRnZXQgLSBQcm9wcmnDqXTDqSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJVREdFVF9BTk5FRSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IEFubsOpZSBkZSBsJ2V4ZXJjaWNlIGJ1ZGfDqXRhaXJlIHN1ciBsZXF1ZWwgcydhcHBsaXF1ZSBsYSBkw6ljaXNpb24gc2kgY2VsbGUtY2kgYSB1biBpbXBhY3QgYnVkZ8OpdGFpcmUuIEZvcm1hdCBBQUFBIHBvdXIgdW5lIGFubsOpZSBvdSBBQUFBL0FBQUEgcG91ciB1biBpbnRlcnZhbGxlIGVudHJlIGRldXggYW5uw6llcyBzdWl2YW50IGxhIG5vcm1lIGludGVybmF0aW9uYWxlICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2ZyLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIiIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJJU08gODYwMSIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRXggOiAnMjAxNycgcG91ciB1bmUgYW5uw6llIG91ICcyMDE3LzIwMTgnIHBvdXIgdW4gaW50ZXJ2YWxsZSIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb3B0aW9ubmVsbGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBjaGHDrm5lIGRlIGNhcmFjdMOocmVzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIk1vdGlmIDogIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIl5bMC05XXs0fShcXC9bMC05XXs0fSk/JCIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJub20tZHUtYnVkZ2V0LXByb3ByaWV0ZS1idWRnZXQtbm9tIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIk5vbSBkdSBidWRnZXQgLSBQcm9wcmnDqXTDqSAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIkJVREdFVF9OT00iKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBDZSBjaGFtcCBuZSBwZXV0IMOqdHJlIHJlbnNlaWduw6kgcXVlIHNpIGxhIGTDqWxpYsOpcmF0aW9uIGVuZ2VuZHJlIHVuZSBhZmZlY3Rpb24gYnVkZ8OpdGFpcmUuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IEJ1ZGdldCBhbm5leGUgZMOpY2hldHMtY29sbGVjdGUgZXQgdHJhaXRlbWVudCIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IGNoYcOubmUgZGUgY2FyYWN0w6hyZXMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDoKICAgICAgICAgICAgICAiaWRlbnRpZmlhbnQtZGUtbC1lbnRpdGUtZXhlcmNhbnQtbGUtY29udHJvbGUtZGUtbGVnYWxpdGUtcHJvcHJpZXRlLXByZWYtaWQiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJZGVudGlmaWFudCBkZSBsJ2VudGl0w6kgZXhlcsOnYW50IGxlIGNvbnRyw7RsZSBkZSBsw6lnYWxpdMOpIC0gUHJvcHJpw6l0w6kgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiUFJFRl9JRCIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IENldCBpZGVudGlmaWFudCBkw6lwZW5kIGRlIGwnZW50aXTDqSBjb25jZXJuw6llLiBQb3VyIGxlcyBwcsOpZmVjdHVyZXMsIGlsIGVzdCBjb2TDqSAnUFJFRk5OTicgc3VyIDcgY2FyYWN0w6hyZXMuIFBvdXIgbGVzIHNvdXMtcHLDqWZlY3R1cmVzLCBpbCBlc3QgY29kw6kgJ1NQUkVGTk5OTScgc3VyIDkgY2FyYWN0w6hyZXMuIFBvdXIgbGVzIFNHQVIsIGlsIGVzdCBjb2TDqSAnU0dBUk5OTicgc3VyIDcgY2FyYWN0w6hyZXMuICdOTk4nIGNvcnJlc3BvbmQgYXUgbnVtw6lybyBzdXIgMyBjYXJhY3TDqHJlcyBkdSBkw6lwYXJ0ZW1lbnQgcHLDqWZpeMOpIHBhciAnMCcgZXQgaW5jbGFudCAnQScgZXQgJ0InIHBvdXIgbGVzIGTDqXBhcnRlbWVudHMgY29yc2VzLiAnTScgY29ycmVzcG9uZCBhdSBudW3DqXJvIHN1ciB1biBjaGlmZnJlIGRlIGwnYXJyb25kaXNzZW1lbnQuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IFBSRUYwMzgiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb3B0aW9ubmVsbGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBjaGHDrm5lIGRlIGNhcmFjdMOocmVzIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6CiAgICAgICAgICAgICAgImRhdGUtZC1lbnJlZ2lzdHJlbWVudC1kZS1sYS1kZWxpYmVyYXRpb24tYXVwcmVzLWR1LWNvbnRyb2xlLWRlLWxlZ2FsaXRlLXByb3ByaWV0ZS1wcmVmLWRhdGUiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJEYXRlIGQnZW5yZWdpc3RyZW1lbnQgZGUgbGEgZMOpbGliw6lyYXRpb24gYXVwcsOocyBkdSBjb250csO0bGUgZGUgbMOpZ2FsaXTDqSAtIFByb3ByacOpdMOpICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlBSRUZfREFURSIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IERhdGUgZCdlbnJlZ2lzdHJlbWVudCBkZSBsYSBkw6lsaWLDqXJhdGlvbiBhdSBjb250csO0bGUgZGUgbMOpZ2FsaXTDqSBhdSBmb3JtYXQgQUFBQS1NTS1KSiBzdWl2YW50IGxhIG5vcm1lIGludGVybmF0aW9uYWxlICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2ZyLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSIsCiAgICAgICAgICAgICAgICAgIHRhcmdldDogIiIsCiAgICAgICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJJU08gODYwMSIpXQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIi4gQ2UgY2hhbXAgbmUgcGV1dCDDqnRyZSByZW5zZWlnbsOpIHF1ZSBzaSBsYSBkw6lsaWLDqXJhdGlvbiBhIGVmZmVjdGl2ZW1lbnQgw6l0w6kgdHJhbnNtaXNlIGV0IHF1ZSBzYSBkYXRlIGQnZW5yZWdpc3RyZW1lbnQgZXN0IGNvbm51ZS4iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogMjAxNy0wMi0wMyIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IGRhdGUiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBpZDogImVmZmVjdGlmLXRoZW9yaXF1ZS1kZXMtdm90YW50cy1wcm9wcmlldGUtdm90ZS1lZmZlY3RpZiIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigiRWZmZWN0aWYgdGjDqW9yaXF1ZSBkZXMgdm90YW50cyAtIFByb3ByacOpdMOpICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJWT1RFX0VGRkVDVElGIildKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkRlc2NyaXB0aW9uIDogRMOpY29tcHRlIGRlIGwnZWZmZWN0aWYgdG90YWwgZGVzIHJlcHLDqXNlbnRhbnRzIMOpbHVzIHN1c2NlcHRpYmxlcyBkZSBwYXJ0aWNpcGVyIGF1IHZvdGUuIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDQzIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVmFsZXVyIG9wdGlvbm5lbGxlIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUeXBlIDogbm9tYnJlIGVudGllciIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDQiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJlZmZlY3RpZi1yZWVsLWRlcy12b3RhbnRzLXByb3ByaWV0ZS12b3RlLXJlZWwiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkVmZmVjdGlmIHLDqWVsIGRlcyB2b3RhbnRzIC0gUHJvcHJpw6l0w6kgIiksCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIlZPVEVfUkVFTCIpXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEZXNjcmlwdGlvbiA6IETDqWNvbXB0ZSBkZSBs4oCZZWZmZWN0aWYgdG90YWwgZGVzIMOpbHVzIGF5YW50IHLDqWVsbGVtZW50IHBhcnRpY2lww6kgYXUgdm90ZSAoZXhjbHVzaW9uIGRlcyBhYnNlbnRzKSIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiA0MCIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogInBvdXItcHJvcHJpZXRlLXZvdGUtcG91ciIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJQb3VyIC0gUHJvcHJpw6l0w6kgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJWT1RFX1BPVVIiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigiRGVzY3JpcHRpb24gOiBEw6ljb21wdGUgZHUgbm9tYnJlIHRvdGFsIGRlIHZvdGVzICdQb3VyJy4iKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiRXggOiAyNSIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlZhbGV1ciBvcHRpb25uZWxsZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiVHlwZSA6IG5vbWJyZSBlbnRpZXIiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImNvbnRyZS1wcm9wcmlldGUtdm90ZS1jb250cmUiIH0gfSwgWwogICAgICAgIF92bS5fdigiQ29udHJlIC0gUHJvcHJpw6l0w6kgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJWT1RFX0NPTlRSRSIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiYmxvY2txdW90ZSIsIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJEZXNjcmlwdGlvbiA6IETDqWNvbXB0ZSBkdSBub21icmUgdG90YWwgZGUgdm90ZXMgJ0NvbnRyZScuIiksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoIkV4IDogMTAiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb3B0aW9ubmVsbGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBub21icmUgZW50aWVyIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNCIsIHsgYXR0cnM6IHsgaWQ6ICJhYnN0ZW50aW9uLXByb3ByaWV0ZS12b3RlLWFic3RlbnRpb24iIH0gfSwgWwogICAgICAgIF92bS5fdigiQWJzdGVudGlvbiAtIFByb3ByacOpdMOpICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiVk9URV9BQlNURU5USU9OIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgICBfdm0uX3YoIkRlc2NyaXB0aW9uIDogRMOpY29tcHRlIGR1IG5vbWJyZSB0b3RhbCBkJ2Fic3RlbnRpb25zLiIpLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX3ZtLl92KCJFeCA6IDUiKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb3B0aW9ubmVsbGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlR5cGUgOiBub21icmUgZW50aWVyIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoNCIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgaWQ6ICJsaWVuLXZlcnMtbGUtZG9jdW1lbnQtZGUtbGEtZGVsaWJlcmF0aW9uLXByb3ByaWV0ZS1kZWxpYi11cmwiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkxpZW4gdmVycyBsZSBkb2N1bWVudCBkZSBsYSBkw6lsaWLDqXJhdGlvbiAtIFByb3ByacOpdMOpICIpLAogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJERUxJQl9VUkwiKV0pCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRGVzY3JpcHRpb24gOiBTaSBsYSBjb2xsZWN0aXZpdMOpIGRpc3Bvc2UgZCd1bmUgdmVyc2lvbiDDqWxlY3Ryb25pcXVlIGRlIGxhIGTDqWxpYsOpcmF0aW9uIGV0IGxhIHB1YmxpZSBlbiBsaWduZSwgY2UgbGllbiBjb3JyZXNwb25kIMOgIGwnYWRyZXNzZSBwZXJtZXR0YW50IGRlIGNvbnN1bHRlciBvdSBkZSB0w6lsw6ljaGFyZ2VyIGxlIGRvY3VtZW50LiIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiRXggOiBodHRwczovL2RhdGEubWF2aWxsZS5mci9kZWxpYmVyYXRpb25zL2ZpbGVzLzIwMDQxN18xLnBkZiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJWYWxldXIgb3B0aW9ubmVsbGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiVHlwZSA6IGNoYcOubmUgZGUgY2FyYWN0w6hyZXMgKGZvcm1hdCAiKSwKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigidXJpIildKSwKICAgICAgICAgIF92bS5fdigiKSIpCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0sCiAgICAxCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}